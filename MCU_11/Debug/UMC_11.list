
UMC_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eac  08002eac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eac  08002eac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eac  08002eac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002ec0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002ec0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ed8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000180c  00000000  00000000  00029f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089f  00000000  00000000  0002c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e64  00000000  00000000  0002cb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbcb  00000000  00000000  0005299b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ece96  00000000  00000000  0005e566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e44  00000000  00000000  0014b3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e54 	.word	0x08002e54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002e54 	.word	0x08002e54

080001c8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 if (htim == &htim3) {
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a0c      	ldr	r2, [pc, #48]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d110      	bne.n	80001fa <HAL_TIM_PeriodElapsedCallback+0x32>
 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001d8:	2120      	movs	r1, #32
 80001da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001de:	f000 fe03 	bl	8000de8 <HAL_GPIO_TogglePin>

// HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
// HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
// HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);

 led_set(1, true);
 80001e2:	2101      	movs	r1, #1
 80001e4:	2001      	movs	r0, #1
 80001e6:	f000 f83b 	bl	8000260 <led_set>
 led_set(2, true);
 80001ea:	2101      	movs	r1, #1
 80001ec:	2002      	movs	r0, #2
 80001ee:	f000 f837 	bl	8000260 <led_set>
 led_set(3, false);
 80001f2:	2100      	movs	r1, #0
 80001f4:	2003      	movs	r0, #3
 80001f6:	f000 f833 	bl	8000260 <led_set>
 }
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	20000028 	.word	0x20000028

08000208 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 if (htim == &htim3) {
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a12      	ldr	r2, [pc, #72]	; (800025c <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d11c      	bne.n	8000252 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 switch (HAL_TIM_GetActiveChannel(&htim3)) {
 8000218:	4810      	ldr	r0, [pc, #64]	; (800025c <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 800021a:	f002 f90c 	bl	8002436 <HAL_TIM_GetActiveChannel>
 800021e:	4603      	mov	r3, r0
 8000220:	2b04      	cmp	r3, #4
 8000222:	d010      	beq.n	8000246 <HAL_TIM_OC_DelayElapsedCallback+0x3e>
 8000224:	2b04      	cmp	r3, #4
 8000226:	dc13      	bgt.n	8000250 <HAL_TIM_OC_DelayElapsedCallback+0x48>
 8000228:	2b01      	cmp	r3, #1
 800022a:	d002      	beq.n	8000232 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 800022c:	2b02      	cmp	r3, #2
 800022e:	d005      	beq.n	800023c <HAL_TIM_OC_DelayElapsedCallback+0x34>
 break;
 case HAL_TIM_ACTIVE_CHANNEL_3:
	 led_set(3, false);
 break;
 default:
 break;
 8000230:	e00e      	b.n	8000250 <HAL_TIM_OC_DelayElapsedCallback+0x48>
	 led_set(1, false);
 8000232:	2100      	movs	r1, #0
 8000234:	2001      	movs	r0, #1
 8000236:	f000 f813 	bl	8000260 <led_set>
 break;
 800023a:	e00a      	b.n	8000252 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	 led_set(2, false);
 800023c:	2100      	movs	r1, #0
 800023e:	2002      	movs	r0, #2
 8000240:	f000 f80e 	bl	8000260 <led_set>
 break;
 8000244:	e005      	b.n	8000252 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	 led_set(3, false);
 8000246:	2100      	movs	r1, #0
 8000248:	2003      	movs	r0, #3
 800024a:	f000 f809 	bl	8000260 <led_set>
 break;
 800024e:	e000      	b.n	8000252 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 break;
 8000250:	bf00      	nop
 }
 }
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000028 	.word	0x20000028

08000260 <led_set>:



void led_set(int led, bool turn_on)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	70fb      	strb	r3, [r7, #3]
 GPIO_PinState state = (turn_on) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800026c:	78fb      	ldrb	r3, [r7, #3]
 800026e:	73fb      	strb	r3, [r7, #15]
 switch (led) {
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b03      	cmp	r3, #3
 8000274:	d023      	beq.n	80002be <led_set+0x5e>
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b03      	cmp	r3, #3
 800027a:	dc2c      	bgt.n	80002d6 <led_set+0x76>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d003      	beq.n	800028a <led_set+0x2a>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b02      	cmp	r3, #2
 8000286:	d00d      	beq.n	80002a4 <led_set+0x44>
 break;
 case 3:
 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, !state);
 break;
 default:
 break;
 8000288:	e025      	b.n	80002d6 <led_set+0x76>
 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, !state);
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	2b00      	cmp	r3, #0
 800028e:	bf0c      	ite	eq
 8000290:	2301      	moveq	r3, #1
 8000292:	2300      	movne	r3, #0
 8000294:	b2db      	uxtb	r3, r3
 8000296:	461a      	mov	r2, r3
 8000298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029c:	4810      	ldr	r0, [pc, #64]	; (80002e0 <led_set+0x80>)
 800029e:	f000 fd8b 	bl	8000db8 <HAL_GPIO_WritePin>
 break;
 80002a2:	e019      	b.n	80002d8 <led_set+0x78>
 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !state);
 80002a4:	7bfb      	ldrb	r3, [r7, #15]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	bf0c      	ite	eq
 80002aa:	2301      	moveq	r3, #1
 80002ac:	2300      	movne	r3, #0
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	461a      	mov	r2, r3
 80002b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <led_set+0x84>)
 80002b8:	f000 fd7e 	bl	8000db8 <HAL_GPIO_WritePin>
 break;
 80002bc:	e00c      	b.n	80002d8 <led_set+0x78>
 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, !state);
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	bf0c      	ite	eq
 80002c4:	2301      	moveq	r3, #1
 80002c6:	2300      	movne	r3, #0
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	2140      	movs	r1, #64	; 0x40
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <led_set+0x84>)
 80002d0:	f000 fd72 	bl	8000db8 <HAL_GPIO_WritePin>
 break;
 80002d4:	e000      	b.n	80002d8 <led_set+0x78>
 break;
 80002d6:	bf00      	nop
 }
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	48000400 	.word	0x48000400
 80002e4:	48000800 	.word	0x48000800

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ec:	f000 fa33 	bl	8000756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f0:	f000 f816 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f4:	f000 f8f8 	bl	80004e8 <MX_GPIO_Init>
  MX_TIM3_Init();
 80002f8:	f000 f864 	bl	80003c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80002fc:	4807      	ldr	r0, [pc, #28]	; (800031c <main+0x34>)
 80002fe:	f001 fc11 	bl	8001b24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000302:	2100      	movs	r1, #0
 8000304:	4805      	ldr	r0, [pc, #20]	; (800031c <main+0x34>)
 8000306:	f001 fcdf 	bl	8001cc8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 800030a:	2104      	movs	r1, #4
 800030c:	4803      	ldr	r0, [pc, #12]	; (800031c <main+0x34>)
 800030e:	f001 fcdb 	bl	8001cc8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000312:	2108      	movs	r1, #8
 8000314:	4801      	ldr	r0, [pc, #4]	; (800031c <main+0x34>)
 8000316:	f001 fcd7 	bl	8001cc8 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800031a:	e7fe      	b.n	800031a <main+0x32>
 800031c:	20000028 	.word	0x20000028

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b096      	sub	sp, #88	; 0x58
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	2244      	movs	r2, #68	; 0x44
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f002 fd64 	bl	8002dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	463b      	mov	r3, r7
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000342:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000346:	f000 fd77 	bl	8000e38 <HAL_PWREx_ControlVoltageScaling>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000350:	f000 f942 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000354:	2310      	movs	r3, #16
 8000356:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000360:	2360      	movs	r3, #96	; 0x60
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000364:	2302      	movs	r3, #2
 8000366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000368:	2301      	movs	r3, #1
 800036a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800036c:	2301      	movs	r3, #1
 800036e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000370:	2328      	movs	r3, #40	; 0x28
 8000372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000374:	2307      	movs	r3, #7
 8000376:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000378:	2302      	movs	r3, #2
 800037a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800037c:	2302      	movs	r3, #2
 800037e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fdad 	bl	8000ee4 <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000390:	f000 f922 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000394:	230f      	movs	r3, #15
 8000396:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000398:	2303      	movs	r3, #3
 800039a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003a8:	463b      	mov	r3, r7
 80003aa:	2104      	movs	r1, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 f975 	bl	800169c <HAL_RCC_ClockConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003b8:	f000 f90e 	bl	80005d8 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3758      	adds	r7, #88	; 0x58
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08e      	sub	sp, #56	; 0x38
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	f107 031c 	add.w	r3, r7, #28
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]
 80003f2:	615a      	str	r2, [r3, #20]
 80003f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003f6:	4b3a      	ldr	r3, [pc, #232]	; (80004e0 <MX_TIM3_Init+0x11c>)
 80003f8:	4a3a      	ldr	r2, [pc, #232]	; (80004e4 <MX_TIM3_Init+0x120>)
 80003fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80003fc:	4b38      	ldr	r3, [pc, #224]	; (80004e0 <MX_TIM3_Init+0x11c>)
 80003fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000402:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000404:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <MX_TIM3_Init+0x11c>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800040a:	4b35      	ldr	r3, [pc, #212]	; (80004e0 <MX_TIM3_Init+0x11c>)
 800040c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000410:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000412:	4b33      	ldr	r3, [pc, #204]	; (80004e0 <MX_TIM3_Init+0x11c>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000418:	4b31      	ldr	r3, [pc, #196]	; (80004e0 <MX_TIM3_Init+0x11c>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800041e:	4830      	ldr	r0, [pc, #192]	; (80004e0 <MX_TIM3_Init+0x11c>)
 8000420:	f001 fb28 	bl	8001a74 <HAL_TIM_Base_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800042a:	f000 f8d5 	bl	80005d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000438:	4619      	mov	r1, r3
 800043a:	4829      	ldr	r0, [pc, #164]	; (80004e0 <MX_TIM3_Init+0x11c>)
 800043c:	f001 ff14 	bl	8002268 <HAL_TIM_ConfigClockSource>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000446:	f000 f8c7 	bl	80005d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800044a:	4825      	ldr	r0, [pc, #148]	; (80004e0 <MX_TIM3_Init+0x11c>)
 800044c:	f001 fbda 	bl	8001c04 <HAL_TIM_OC_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000456:	f000 f8bf 	bl	80005d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000462:	f107 031c 	add.w	r3, r7, #28
 8000466:	4619      	mov	r1, r3
 8000468:	481d      	ldr	r0, [pc, #116]	; (80004e0 <MX_TIM3_Init+0x11c>)
 800046a:	f002 fc21 	bl	8002cb0 <HAL_TIMEx_MasterConfigSynchronization>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000474:	f000 f8b0 	bl	80005d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000478:	2300      	movs	r3, #0
 800047a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500;
 800047c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000480:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000482:	2300      	movs	r3, #0
 8000484:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800048a:	463b      	mov	r3, r7
 800048c:	2200      	movs	r2, #0
 800048e:	4619      	mov	r1, r3
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <MX_TIM3_Init+0x11c>)
 8000492:	f001 fe6f 	bl	8002174 <HAL_TIM_OC_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800049c:	f000 f89c 	bl	80005d8 <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 80004a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80004a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004a6:	463b      	mov	r3, r7
 80004a8:	2204      	movs	r2, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <MX_TIM3_Init+0x11c>)
 80004ae:	f001 fe61 	bl	8002174 <HAL_TIM_OC_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80004b8:	f000 f88e 	bl	80005d8 <Error_Handler>
  }
  sConfigOC.Pulse = 7500;
 80004bc:	f641 534c 	movw	r3, #7500	; 0x1d4c
 80004c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004c2:	463b      	mov	r3, r7
 80004c4:	2208      	movs	r2, #8
 80004c6:	4619      	mov	r1, r3
 80004c8:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_TIM3_Init+0x11c>)
 80004ca:	f001 fe53 	bl	8002174 <HAL_TIM_OC_ConfigChannel>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM3_Init+0x114>
  {
    Error_Handler();
 80004d4:	f000 f880 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004d8:	bf00      	nop
 80004da:	3738      	adds	r7, #56	; 0x38
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000028 	.word	0x20000028
 80004e4:	40000400 	.word	0x40000400

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b33      	ldr	r3, [pc, #204]	; (80005cc <MX_GPIO_Init+0xe4>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a32      	ldr	r2, [pc, #200]	; (80005cc <MX_GPIO_Init+0xe4>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b30      	ldr	r3, [pc, #192]	; (80005cc <MX_GPIO_Init+0xe4>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <MX_GPIO_Init+0xe4>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a2c      	ldr	r2, [pc, #176]	; (80005cc <MX_GPIO_Init+0xe4>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b2a      	ldr	r3, [pc, #168]	; (80005cc <MX_GPIO_Init+0xe4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	4b27      	ldr	r3, [pc, #156]	; (80005cc <MX_GPIO_Init+0xe4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a26      	ldr	r2, [pc, #152]	; (80005cc <MX_GPIO_Init+0xe4>)
 8000534:	f043 0302 	orr.w	r3, r3, #2
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b24      	ldr	r3, [pc, #144]	; (80005cc <MX_GPIO_Init+0xe4>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054e:	f000 fc33 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000558:	481d      	ldr	r0, [pc, #116]	; (80005d0 <MX_GPIO_Init+0xe8>)
 800055a:	f000 fc2d 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000564:	481b      	ldr	r0, [pc, #108]	; (80005d4 <MX_GPIO_Init+0xec>)
 8000566:	f000 fc27 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800056a:	2320      	movs	r3, #32
 800056c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4619      	mov	r1, r3
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f000 fa6e 	bl	8000a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000588:	f44f 7310 	mov.w	r3, #576	; 0x240
 800058c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	4619      	mov	r1, r3
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <MX_GPIO_Init+0xe8>)
 80005a2:	f000 fa5f 	bl	8000a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80005a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_GPIO_Init+0xec>)
 80005c0:	f000 fa50 	bl	8000a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000800 	.word	0x48000800
 80005d4:	48000400 	.word	0x48000400

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <Error_Handler+0x8>
	...

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x44>)
 80005ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_MspInit+0x44>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6613      	str	r3, [r2, #96]	; 0x60
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_MspInit+0x44>)
 80005f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_MspInit+0x44>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <HAL_MspInit+0x44>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	6593      	str	r3, [r2, #88]	; 0x58
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_MspInit+0x44>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <HAL_TIM_Base_MspInit+0x44>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d113      	bne.n	8000666 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_Base_MspInit+0x48>)
 8000640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <HAL_TIM_Base_MspInit+0x48>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6593      	str	r3, [r2, #88]	; 0x58
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_TIM_Base_MspInit+0x48>)
 800064c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	210a      	movs	r1, #10
 800065a:	201d      	movs	r0, #29
 800065c:	f000 f9cb 	bl	80009f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000660:	201d      	movs	r0, #29
 8000662:	f000 f9e4 	bl	8000a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40000400 	.word	0x40000400
 8000674:	40021000 	.word	0x40021000

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800067c:	e7fe      	b.n	800067c <NMI_Handler+0x4>

0800067e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <HardFault_Handler+0x4>

08000684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <MemManage_Handler+0x4>

0800068a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <BusFault_Handler+0x4>

08000690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <UsageFault_Handler+0x4>

08000696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c4:	f000 f89c 	bl	8000800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <TIM3_IRQHandler+0x10>)
 80006d2:	f001 fc4d 	bl	8001f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000028 	.word	0x20000028

080006e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <SystemInit+0x20>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <SystemInit+0x20>)
 80006ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800073c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000708:	f7ff ffea 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	; (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	; (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000732:	f002 fb6b 	bl	8002e0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000736:	f7ff fdd7 	bl	80002e8 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800073c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000748:	08002eb4 	.word	0x08002eb4
  ldr r2, =_sbss
 800074c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000750:	20000078 	.word	0x20000078

08000754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_2_IRQHandler>

08000756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f93d 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000766:	200f      	movs	r0, #15
 8000768:	f000 f80e 	bl	8000788 <HAL_InitTick>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	e001      	b.n	800077c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000778:	f7ff ff34 	bl	80005e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800077c:	79fb      	ldrb	r3, [r7, #7]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_InitTick+0x6c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d023      	beq.n	80007e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <HAL_InitTick+0x70>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_InitTick+0x6c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f949 	bl	8000a4a <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10f      	bne.n	80007de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d809      	bhi.n	80007d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 f913 	bl	80009f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <HAL_InitTick+0x74>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	e007      	b.n	80007e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e004      	b.n	80007e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	e001      	b.n	80007e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000004 	.word	0x20000004

08000800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_IncTick+0x20>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_IncTick+0x24>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_IncTick+0x24>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008
 8000824:	20000074 	.word	0x20000074

08000828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <HAL_GetTick+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000074 	.word	0x20000074

08000840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <__NVIC_SetPriorityGrouping+0x44>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800085c:	4013      	ands	r3, r2
 800085e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <__NVIC_SetPriorityGrouping+0x44>)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	60d3      	str	r3, [r2, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <__NVIC_GetPriorityGrouping+0x18>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	f003 0307 	and.w	r3, r3, #7
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	db0b      	blt.n	80008ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 021f 	and.w	r2, r3, #31
 80008bc:	4907      	ldr	r1, [pc, #28]	; (80008dc <__NVIC_EnableIRQ+0x38>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	095b      	lsrs	r3, r3, #5
 80008c4:	2001      	movs	r0, #1
 80008c6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e100 	.word	0xe000e100

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ac:	d301      	bcc.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00f      	b.n	80009d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <SysTick_Config+0x40>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	210f      	movs	r1, #15
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f7ff ff8e 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <SysTick_Config+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <SysTick_Config+0x40>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff29 	bl	8000840 <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff3e 	bl	8000888 <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ff8e 	bl	8000934 <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff5d 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff31 	bl	80008a4 <__NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffa2 	bl	800099c <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b087      	sub	sp, #28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	e17f      	b.n	8000d74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 8171 	beq.w	8000d6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0303 	and.w	r3, r3, #3
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d005      	beq.n	8000aa4 <HAL_GPIO_Init+0x40>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d130      	bne.n	8000b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	2203      	movs	r2, #3
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68da      	ldr	r2, [r3, #12]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ada:	2201      	movs	r2, #1
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	091b      	lsrs	r3, r3, #4
 8000af0:	f003 0201 	and.w	r2, r3, #1
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d118      	bne.n	8000b44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b18:	2201      	movs	r2, #1
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	08db      	lsrs	r3, r3, #3
 8000b2e:	f003 0201 	and.w	r2, r3, #1
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0303 	and.w	r3, r3, #3
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d017      	beq.n	8000b80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d123      	bne.n	8000bd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3208      	adds	r2, #8
 8000b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	08da      	lsrs	r2, r3, #3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3208      	adds	r2, #8
 8000bce:	6939      	ldr	r1, [r7, #16]
 8000bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0203 	and.w	r2, r3, #3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 80ac 	beq.w	8000d6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b5f      	ldr	r3, [pc, #380]	; (8000d94 <HAL_GPIO_Init+0x330>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	4a5e      	ldr	r2, [pc, #376]	; (8000d94 <HAL_GPIO_Init+0x330>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6613      	str	r3, [r2, #96]	; 0x60
 8000c22:	4b5c      	ldr	r3, [pc, #368]	; (8000d94 <HAL_GPIO_Init+0x330>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c2e:	4a5a      	ldr	r2, [pc, #360]	; (8000d98 <HAL_GPIO_Init+0x334>)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3302      	adds	r3, #2
 8000c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	220f      	movs	r2, #15
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c58:	d025      	beq.n	8000ca6 <HAL_GPIO_Init+0x242>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a4f      	ldr	r2, [pc, #316]	; (8000d9c <HAL_GPIO_Init+0x338>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d01f      	beq.n	8000ca2 <HAL_GPIO_Init+0x23e>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a4e      	ldr	r2, [pc, #312]	; (8000da0 <HAL_GPIO_Init+0x33c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d019      	beq.n	8000c9e <HAL_GPIO_Init+0x23a>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a4d      	ldr	r2, [pc, #308]	; (8000da4 <HAL_GPIO_Init+0x340>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d013      	beq.n	8000c9a <HAL_GPIO_Init+0x236>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a4c      	ldr	r2, [pc, #304]	; (8000da8 <HAL_GPIO_Init+0x344>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d00d      	beq.n	8000c96 <HAL_GPIO_Init+0x232>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a4b      	ldr	r2, [pc, #300]	; (8000dac <HAL_GPIO_Init+0x348>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d007      	beq.n	8000c92 <HAL_GPIO_Init+0x22e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a4a      	ldr	r2, [pc, #296]	; (8000db0 <HAL_GPIO_Init+0x34c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_GPIO_Init+0x22a>
 8000c8a:	2306      	movs	r3, #6
 8000c8c:	e00c      	b.n	8000ca8 <HAL_GPIO_Init+0x244>
 8000c8e:	2307      	movs	r3, #7
 8000c90:	e00a      	b.n	8000ca8 <HAL_GPIO_Init+0x244>
 8000c92:	2305      	movs	r3, #5
 8000c94:	e008      	b.n	8000ca8 <HAL_GPIO_Init+0x244>
 8000c96:	2304      	movs	r3, #4
 8000c98:	e006      	b.n	8000ca8 <HAL_GPIO_Init+0x244>
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e004      	b.n	8000ca8 <HAL_GPIO_Init+0x244>
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e002      	b.n	8000ca8 <HAL_GPIO_Init+0x244>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e000      	b.n	8000ca8 <HAL_GPIO_Init+0x244>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	f002 0203 	and.w	r2, r2, #3
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	4093      	lsls	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb8:	4937      	ldr	r1, [pc, #220]	; (8000d98 <HAL_GPIO_Init+0x334>)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cc6:	4b3b      	ldr	r3, [pc, #236]	; (8000db4 <HAL_GPIO_Init+0x350>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cea:	4a32      	ldr	r2, [pc, #200]	; (8000db4 <HAL_GPIO_Init+0x350>)
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cf0:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <HAL_GPIO_Init+0x350>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d14:	4a27      	ldr	r2, [pc, #156]	; (8000db4 <HAL_GPIO_Init+0x350>)
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <HAL_GPIO_Init+0x350>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d3e:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <HAL_GPIO_Init+0x350>)
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_GPIO_Init+0x350>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <HAL_GPIO_Init+0x350>)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	3301      	adds	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f47f ae78 	bne.w	8000a74 <HAL_GPIO_Init+0x10>
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	48000400 	.word	0x48000400
 8000da0:	48000800 	.word	0x48000800
 8000da4:	48000c00 	.word	0x48000c00
 8000da8:	48001000 	.word	0x48001000
 8000dac:	48001400 	.word	0x48001400
 8000db0:	48001800 	.word	0x48001800
 8000db4:	40010400 	.word	0x40010400

08000db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc8:	787b      	ldrb	r3, [r7, #1]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dd6:	887a      	ldrh	r2, [r7, #2]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dfa:	887a      	ldrh	r2, [r7, #2]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	041a      	lsls	r2, r3, #16
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43d9      	mvns	r1, r3
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	400b      	ands	r3, r1
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	619a      	str	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40007000 	.word	0x40007000

08000e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e46:	d130      	bne.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e54:	d038      	beq.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e56:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2232      	movs	r2, #50	; 0x32
 8000e6c:	fb02 f303 	mul.w	r3, r2, r3
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	0c9b      	lsrs	r3, r3, #18
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e7c:	e002      	b.n	8000e84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e90:	d102      	bne.n	8000e98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1f2      	bne.n	8000e7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea4:	d110      	bne.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e00f      	b.n	8000eca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb6:	d007      	beq.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ec0:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40007000 	.word	0x40007000
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	431bde83 	.word	0x431bde83

08000ee4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e3ca      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef6:	4b97      	ldr	r3, [pc, #604]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f00:	4b94      	ldr	r3, [pc, #592]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80e4 	beq.w	80010e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <HAL_RCC_OscConfig+0x4a>
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b0c      	cmp	r3, #12
 8000f22:	f040 808b 	bne.w	800103c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	f040 8087 	bne.w	800103c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f2e:	4b89      	ldr	r3, [pc, #548]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d005      	beq.n	8000f46 <HAL_RCC_OscConfig+0x62>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e3a2      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a1a      	ldr	r2, [r3, #32]
 8000f4a:	4b82      	ldr	r3, [pc, #520]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <HAL_RCC_OscConfig+0x7c>
 8000f56:	4b7f      	ldr	r3, [pc, #508]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f5e:	e005      	b.n	8000f6c <HAL_RCC_OscConfig+0x88>
 8000f60:	4b7c      	ldr	r3, [pc, #496]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d223      	bcs.n	8000fb8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fd1d 	bl	80019b4 <RCC_SetFlashLatencyFromMSIRange>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e383      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f84:	4b73      	ldr	r3, [pc, #460]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a72      	ldr	r2, [pc, #456]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	f043 0308 	orr.w	r3, r3, #8
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b70      	ldr	r3, [pc, #448]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	496d      	ldr	r1, [pc, #436]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fa2:	4b6c      	ldr	r3, [pc, #432]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	4968      	ldr	r1, [pc, #416]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	604b      	str	r3, [r1, #4]
 8000fb6:	e025      	b.n	8001004 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fb8:	4b66      	ldr	r3, [pc, #408]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a65      	ldr	r2, [pc, #404]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	f043 0308 	orr.w	r3, r3, #8
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b63      	ldr	r3, [pc, #396]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4960      	ldr	r1, [pc, #384]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fd6:	4b5f      	ldr	r3, [pc, #380]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	495b      	ldr	r1, [pc, #364]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fcdd 	bl	80019b4 <RCC_SetFlashLatencyFromMSIRange>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e343      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001004:	f000 fc4a 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001008:	4602      	mov	r2, r0
 800100a:	4b52      	ldr	r3, [pc, #328]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	4950      	ldr	r1, [pc, #320]	; (8001158 <HAL_RCC_OscConfig+0x274>)
 8001016:	5ccb      	ldrb	r3, [r1, r3]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	4a4e      	ldr	r2, [pc, #312]	; (800115c <HAL_RCC_OscConfig+0x278>)
 8001022:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001024:	4b4e      	ldr	r3, [pc, #312]	; (8001160 <HAL_RCC_OscConfig+0x27c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fbad 	bl	8000788 <HAL_InitTick>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d052      	beq.n	80010de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	e327      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d032      	beq.n	80010aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a42      	ldr	r2, [pc, #264]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001050:	f7ff fbea 	bl	8000828 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001058:	f7ff fbe6 	bl	8000828 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e310      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a36      	ldr	r2, [pc, #216]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b34      	ldr	r3, [pc, #208]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4931      	ldr	r1, [pc, #196]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	492c      	ldr	r1, [pc, #176]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
 80010a8:	e01a      	b.n	80010e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a29      	ldr	r2, [pc, #164]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fbb7 	bl	8000828 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010be:	f7ff fbb3 	bl	8000828 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e2dd      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f0      	bne.n	80010be <HAL_RCC_OscConfig+0x1da>
 80010dc:	e000      	b.n	80010e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d074      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d005      	beq.n	80010fe <HAL_RCC_OscConfig+0x21a>
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b0c      	cmp	r3, #12
 80010f6:	d10e      	bne.n	8001116 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d10b      	bne.n	8001116 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d064      	beq.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d160      	bne.n	80011d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e2ba      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x24a>
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8001126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	e026      	b.n	800117c <HAL_RCC_OscConfig+0x298>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001136:	d115      	bne.n	8001164 <HAL_RCC_OscConfig+0x280>
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 800113e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a02      	ldr	r2, [pc, #8]	; (8001154 <HAL_RCC_OscConfig+0x270>)
 800114a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e014      	b.n	800117c <HAL_RCC_OscConfig+0x298>
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	08002e6c 	.word	0x08002e6c
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004
 8001164:	4ba0      	ldr	r3, [pc, #640]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a9f      	ldr	r2, [pc, #636]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800116a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b9d      	ldr	r3, [pc, #628]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a9c      	ldr	r2, [pc, #624]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fb50 	bl	8000828 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fb4c 	bl	8000828 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e276      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800119e:	4b92      	ldr	r3, [pc, #584]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0x2a8>
 80011aa:	e014      	b.n	80011d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ac:	f7ff fb3c 	bl	8000828 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fb38 	bl	8000828 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e262      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x2d0>
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d060      	beq.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d005      	beq.n	80011f4 <HAL_RCC_OscConfig+0x310>
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	2b0c      	cmp	r3, #12
 80011ec:	d119      	bne.n	8001222 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d116      	bne.n	8001222 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f4:	4b7c      	ldr	r3, [pc, #496]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_RCC_OscConfig+0x328>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e23f      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b76      	ldr	r3, [pc, #472]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	061b      	lsls	r3, r3, #24
 800121a:	4973      	ldr	r1, [pc, #460]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001220:	e040      	b.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d023      	beq.n	8001272 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122a:	4b6f      	ldr	r3, [pc, #444]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6e      	ldr	r2, [pc, #440]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff faf7 	bl	8000828 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff faf3 	bl	8000828 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e21d      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001250:	4b65      	ldr	r3, [pc, #404]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	061b      	lsls	r3, r3, #24
 800126a:	495f      	ldr	r1, [pc, #380]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
 8001270:	e018      	b.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5c      	ldr	r2, [pc, #368]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800127c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127e:	f7ff fad3 	bl	8000828 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff facf 	bl	8000828 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e1f9      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001298:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d03c      	beq.n	800132a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01c      	beq.n	80012f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b8:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80012ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012be:	4a4a      	ldr	r2, [pc, #296]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c8:	f7ff faae 	bl	8000828 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff faaa 	bl	8000828 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e1d4      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80012e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0ef      	beq.n	80012d0 <HAL_RCC_OscConfig+0x3ec>
 80012f0:	e01b      	b.n	800132a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f2:	4b3d      	ldr	r3, [pc, #244]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80012f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f8:	4a3b      	ldr	r2, [pc, #236]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001302:	f7ff fa91 	bl	8000828 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130a:	f7ff fa8d 	bl	8000828 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e1b7      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800131e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1ef      	bne.n	800130a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80a6 	beq.w	8001484 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10d      	bne.n	8001364 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001352:	6593      	str	r3, [r2, #88]	; 0x58
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001360:	2301      	movs	r3, #1
 8001362:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <HAL_RCC_OscConfig+0x508>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d118      	bne.n	80013a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <HAL_RCC_OscConfig+0x508>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x508>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137c:	f7ff fa54 	bl	8000828 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001384:	f7ff fa50 	bl	8000828 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e17a      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_RCC_OscConfig+0x508>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d108      	bne.n	80013bc <HAL_RCC_OscConfig+0x4d8>
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ba:	e029      	b.n	8001410 <HAL_RCC_OscConfig+0x52c>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d115      	bne.n	80013f0 <HAL_RCC_OscConfig+0x50c>
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ca:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013da:	4a03      	ldr	r2, [pc, #12]	; (80013e8 <HAL_RCC_OscConfig+0x504>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013e4:	e014      	b.n	8001410 <HAL_RCC_OscConfig+0x52c>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40007000 	.word	0x40007000
 80013f0:	4b9c      	ldr	r3, [pc, #624]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f6:	4a9b      	ldr	r2, [pc, #620]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001400:	4b98      	ldr	r3, [pc, #608]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001406:	4a97      	ldr	r2, [pc, #604]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d016      	beq.n	8001446 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fa06 	bl	8000828 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fa02 	bl	8000828 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	; 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e12a      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001436:	4b8b      	ldr	r3, [pc, #556]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ed      	beq.n	8001420 <HAL_RCC_OscConfig+0x53c>
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001446:	f7ff f9ef 	bl	8000828 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff f9eb 	bl	8000828 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e113      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001464:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ed      	bne.n	800144e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001478:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	4a79      	ldr	r2, [pc, #484]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 800147e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001482:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80fe 	beq.w	800168a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	2b02      	cmp	r3, #2
 8001494:	f040 80d0 	bne.w	8001638 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001498:	4b72      	ldr	r3, [pc, #456]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f003 0203 	and.w	r2, r3, #3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d130      	bne.n	800150e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	3b01      	subs	r3, #1
 80014b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d127      	bne.n	800150e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d11f      	bne.n	800150e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014d8:	2a07      	cmp	r2, #7
 80014da:	bf14      	ite	ne
 80014dc:	2201      	movne	r2, #1
 80014de:	2200      	moveq	r2, #0
 80014e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d113      	bne.n	800150e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	3b01      	subs	r3, #1
 80014f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d109      	bne.n	800150e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	085b      	lsrs	r3, r3, #1
 8001506:	3b01      	subs	r3, #1
 8001508:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d06e      	beq.n	80015ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	2b0c      	cmp	r3, #12
 8001512:	d069      	beq.n	80015e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001514:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d105      	bne.n	800152c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0ad      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001530:	4b4c      	ldr	r3, [pc, #304]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a4b      	ldr	r2, [pc, #300]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800153a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800153c:	f7ff f974 	bl	8000828 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff f970 	bl	8000828 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e09a      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001556:	4b43      	ldr	r3, [pc, #268]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001562:	4b40      	ldr	r3, [pc, #256]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	4b40      	ldr	r3, [pc, #256]	; (8001668 <HAL_RCC_OscConfig+0x784>)
 8001568:	4013      	ands	r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001572:	3a01      	subs	r2, #1
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	4311      	orrs	r1, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800157c:	0212      	lsls	r2, r2, #8
 800157e:	4311      	orrs	r1, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001584:	0852      	lsrs	r2, r2, #1
 8001586:	3a01      	subs	r2, #1
 8001588:	0552      	lsls	r2, r2, #21
 800158a:	4311      	orrs	r1, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001590:	0852      	lsrs	r2, r2, #1
 8001592:	3a01      	subs	r2, #1
 8001594:	0652      	lsls	r2, r2, #25
 8001596:	4311      	orrs	r1, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800159c:	0912      	lsrs	r2, r2, #4
 800159e:	0452      	lsls	r2, r2, #17
 80015a0:	430a      	orrs	r2, r1
 80015a2:	4930      	ldr	r1, [pc, #192]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015a8:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80015ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4a2a      	ldr	r2, [pc, #168]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80015ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015c0:	f7ff f932 	bl	8000828 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff f92e 	bl	8000828 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e058      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015e6:	e050      	b.n	800168a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e04f      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d148      	bne.n	800168a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 80015fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001602:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4a16      	ldr	r2, [pc, #88]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 800160a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001610:	f7ff f90a 	bl	8000828 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff f906 	bl	8000828 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e030      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x734>
 8001636:	e028      	b.n	800168a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2b0c      	cmp	r3, #12
 800163c:	d023      	beq.n	8001686 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_RCC_OscConfig+0x780>)
 8001644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff f8ed 	bl	8000828 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001650:	e00c      	b.n	800166c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff f8e9 	bl	8000828 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d905      	bls.n	800166c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e013      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
 8001664:	40021000 	.word	0x40021000
 8001668:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_RCC_OscConfig+0x7b0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1ec      	bne.n	8001652 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_RCC_OscConfig+0x7b0>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	4905      	ldr	r1, [pc, #20]	; (8001694 <HAL_RCC_OscConfig+0x7b0>)
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_RCC_OscConfig+0x7b4>)
 8001680:	4013      	ands	r3, r2
 8001682:	60cb      	str	r3, [r1, #12]
 8001684:	e001      	b.n	800168a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	feeefffc 	.word	0xfeeefffc

0800169c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0e7      	b.n	8001880 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b0:	4b75      	ldr	r3, [pc, #468]	; (8001888 <HAL_RCC_ClockConfig+0x1ec>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d910      	bls.n	80016e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b72      	ldr	r3, [pc, #456]	; (8001888 <HAL_RCC_ClockConfig+0x1ec>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 0207 	bic.w	r2, r3, #7
 80016c6:	4970      	ldr	r1, [pc, #448]	; (8001888 <HAL_RCC_ClockConfig+0x1ec>)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b6e      	ldr	r3, [pc, #440]	; (8001888 <HAL_RCC_ClockConfig+0x1ec>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0cf      	b.n	8001880 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d010      	beq.n	800170e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d908      	bls.n	800170e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fc:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4960      	ldr	r1, [pc, #384]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d04c      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001722:	4b5a      	ldr	r3, [pc, #360]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d121      	bne.n	8001772 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0a6      	b.n	8001880 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173a:	4b54      	ldr	r3, [pc, #336]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d115      	bne.n	8001772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e09a      	b.n	8001880 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001752:	4b4e      	ldr	r3, [pc, #312]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e08e      	b.n	8001880 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001762:	4b4a      	ldr	r3, [pc, #296]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e086      	b.n	8001880 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001772:	4b46      	ldr	r3, [pc, #280]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f023 0203 	bic.w	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4943      	ldr	r1, [pc, #268]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 8001780:	4313      	orrs	r3, r2
 8001782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001784:	f7ff f850 	bl	8000828 <HAL_GetTick>
 8001788:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178c:	f7ff f84c 	bl	8000828 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	; 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e06e      	b.n	8001880 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a2:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 020c 	and.w	r2, r3, #12
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d1eb      	bne.n	800178c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d010      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d208      	bcs.n	80017e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	492b      	ldr	r1, [pc, #172]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_RCC_ClockConfig+0x1ec>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d210      	bcs.n	8001812 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <HAL_RCC_ClockConfig+0x1ec>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 0207 	bic.w	r2, r3, #7
 80017f8:	4923      	ldr	r1, [pc, #140]	; (8001888 <HAL_RCC_ClockConfig+0x1ec>)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <HAL_RCC_ClockConfig+0x1ec>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e036      	b.n	8001880 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	4918      	ldr	r1, [pc, #96]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4910      	ldr	r1, [pc, #64]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001850:	f000 f824 	bl	800189c <HAL_RCC_GetSysClockFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_RCC_ClockConfig+0x1f0>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	490b      	ldr	r1, [pc, #44]	; (8001890 <HAL_RCC_ClockConfig+0x1f4>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	4a09      	ldr	r2, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 800186e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_ClockConfig+0x1fc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe ff87 	bl	8000788 <HAL_InitTick>
 800187a:	4603      	mov	r3, r0
 800187c:	72fb      	strb	r3, [r7, #11]

  return status;
 800187e:	7afb      	ldrb	r3, [r7, #11]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40022000 	.word	0x40022000
 800188c:	40021000 	.word	0x40021000
 8001890:	08002e6c 	.word	0x08002e6c
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018aa:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b4:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x34>
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d121      	bne.n	800190e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d11e      	bne.n	800190e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018d0:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d107      	bne.n	80018ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018dc:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e005      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018ec:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018f8:	4a2b      	ldr	r2, [pc, #172]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10d      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d102      	bne.n	800191a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_RCC_GetSysClockFreq+0x110>)
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	e004      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d101      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001922:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d134      	bne.n	8001994 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0xa6>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d003      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0xac>
 8001940:	e005      	b.n	800194e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_RCC_GetSysClockFreq+0x110>)
 8001944:	617b      	str	r3, [r7, #20]
      break;
 8001946:	e005      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800194a:	617b      	str	r3, [r7, #20]
      break;
 800194c:	e002      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	617b      	str	r3, [r7, #20]
      break;
 8001952:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	3301      	adds	r3, #1
 8001960:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	fb03 f202 	mul.w	r2, r3, r2
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	0e5b      	lsrs	r3, r3, #25
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	3301      	adds	r3, #1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001994:	69bb      	ldr	r3, [r7, #24]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	08002e7c 	.word	0x08002e7c
 80019ac:	00f42400 	.word	0x00f42400
 80019b0:	007a1200 	.word	0x007a1200

080019b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019c0:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019cc:	f7ff fa26 	bl	8000e1c <HAL_PWREx_GetVoltageRange>
 80019d0:	6178      	str	r0, [r7, #20]
 80019d2:	e014      	b.n	80019fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	4a24      	ldr	r2, [pc, #144]	; (8001a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019de:	6593      	str	r3, [r2, #88]	; 0x58
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019ec:	f7ff fa16 	bl	8000e1c <HAL_PWREx_GetVoltageRange>
 80019f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	4a1d      	ldr	r2, [pc, #116]	; (8001a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a04:	d10b      	bne.n	8001a1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b80      	cmp	r3, #128	; 0x80
 8001a0a:	d919      	bls.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a10:	d902      	bls.n	8001a18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a12:	2302      	movs	r3, #2
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	e013      	b.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a18:	2301      	movs	r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	e010      	b.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b80      	cmp	r3, #128	; 0x80
 8001a22:	d902      	bls.n	8001a2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a24:	2303      	movs	r3, #3
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	e00a      	b.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b80      	cmp	r3, #128	; 0x80
 8001a2e:	d102      	bne.n	8001a36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a30:	2302      	movs	r3, #2
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	e004      	b.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b70      	cmp	r3, #112	; 0x70
 8001a3a:	d101      	bne.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 0207 	bic.w	r2, r3, #7
 8001a48:	4909      	ldr	r1, [pc, #36]	; (8001a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d001      	beq.n	8001a62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40022000 	.word	0x40022000

08001a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e049      	b.n	8001b1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe fdc6 	bl	800062c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	f000 fccc 	bl	8002450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d001      	beq.n	8001b3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e04f      	b.n	8001bdc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a23      	ldr	r2, [pc, #140]	; (8001be8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01d      	beq.n	8001b9a <HAL_TIM_Base_Start_IT+0x76>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b66:	d018      	beq.n	8001b9a <HAL_TIM_Base_Start_IT+0x76>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_TIM_Base_Start_IT+0xc8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_TIM_Base_Start_IT+0x76>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00e      	beq.n	8001b9a <HAL_TIM_Base_Start_IT+0x76>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_TIM_Base_Start_IT+0x76>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d004      	beq.n	8001b9a <HAL_TIM_Base_Start_IT+0x76>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_TIM_Base_Start_IT+0xd8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d115      	bne.n	8001bc6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d015      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0xb4>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb2:	d011      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc4:	e008      	b.n	8001bd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e000      	b.n	8001bda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40000800 	.word	0x40000800
 8001bf4:	40000c00 	.word	0x40000c00
 8001bf8:	40013400 	.word	0x40013400
 8001bfc:	40014000 	.word	0x40014000
 8001c00:	00010007 	.word	0x00010007

08001c04 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e049      	b.n	8001caa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f841 	bl	8001cb2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f000 fc04 	bl	8002450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_TIM_OC_Start_IT+0x28>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	e03c      	b.n	8001d6a <HAL_TIM_OC_Start_IT+0xa2>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d109      	bne.n	8001d0a <HAL_TIM_OC_Start_IT+0x42>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	bf14      	ite	ne
 8001d02:	2301      	movne	r3, #1
 8001d04:	2300      	moveq	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	e02f      	b.n	8001d6a <HAL_TIM_OC_Start_IT+0xa2>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d109      	bne.n	8001d24 <HAL_TIM_OC_Start_IT+0x5c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	bf14      	ite	ne
 8001d1c:	2301      	movne	r3, #1
 8001d1e:	2300      	moveq	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e022      	b.n	8001d6a <HAL_TIM_OC_Start_IT+0xa2>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d109      	bne.n	8001d3e <HAL_TIM_OC_Start_IT+0x76>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	bf14      	ite	ne
 8001d36:	2301      	movne	r3, #1
 8001d38:	2300      	moveq	r3, #0
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	e015      	b.n	8001d6a <HAL_TIM_OC_Start_IT+0xa2>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d109      	bne.n	8001d58 <HAL_TIM_OC_Start_IT+0x90>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	bf14      	ite	ne
 8001d50:	2301      	movne	r3, #1
 8001d52:	2300      	moveq	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e008      	b.n	8001d6a <HAL_TIM_OC_Start_IT+0xa2>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0e7      	b.n	8001f42 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d104      	bne.n	8001d82 <HAL_TIM_OC_Start_IT+0xba>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d80:	e023      	b.n	8001dca <HAL_TIM_OC_Start_IT+0x102>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d104      	bne.n	8001d92 <HAL_TIM_OC_Start_IT+0xca>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d90:	e01b      	b.n	8001dca <HAL_TIM_OC_Start_IT+0x102>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d104      	bne.n	8001da2 <HAL_TIM_OC_Start_IT+0xda>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da0:	e013      	b.n	8001dca <HAL_TIM_OC_Start_IT+0x102>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	d104      	bne.n	8001db2 <HAL_TIM_OC_Start_IT+0xea>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001db0:	e00b      	b.n	8001dca <HAL_TIM_OC_Start_IT+0x102>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b10      	cmp	r3, #16
 8001db6:	d104      	bne.n	8001dc2 <HAL_TIM_OC_Start_IT+0xfa>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc0:	e003      	b.n	8001dca <HAL_TIM_OC_Start_IT+0x102>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	d841      	bhi.n	8001e54 <HAL_TIM_OC_Start_IT+0x18c>
 8001dd0:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <HAL_TIM_OC_Start_IT+0x110>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001e0d 	.word	0x08001e0d
 8001ddc:	08001e55 	.word	0x08001e55
 8001de0:	08001e55 	.word	0x08001e55
 8001de4:	08001e55 	.word	0x08001e55
 8001de8:	08001e1f 	.word	0x08001e1f
 8001dec:	08001e55 	.word	0x08001e55
 8001df0:	08001e55 	.word	0x08001e55
 8001df4:	08001e55 	.word	0x08001e55
 8001df8:	08001e31 	.word	0x08001e31
 8001dfc:	08001e55 	.word	0x08001e55
 8001e00:	08001e55 	.word	0x08001e55
 8001e04:	08001e55 	.word	0x08001e55
 8001e08:	08001e43 	.word	0x08001e43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0202 	orr.w	r2, r2, #2
 8001e1a:	60da      	str	r2, [r3, #12]
      break;
 8001e1c:	e01d      	b.n	8001e5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0204 	orr.w	r2, r2, #4
 8001e2c:	60da      	str	r2, [r3, #12]
      break;
 8001e2e:	e014      	b.n	8001e5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0208 	orr.w	r2, r2, #8
 8001e3e:	60da      	str	r2, [r3, #12]
      break;
 8001e40:	e00b      	b.n	8001e5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0210 	orr.w	r2, r2, #16
 8001e50:	60da      	str	r2, [r3, #12]
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
      break;
 8001e58:	bf00      	nop
  }

  if (status == HAL_OK)
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d16f      	bne.n	8001f40 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fefb 	bl	8002c64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a36      	ldr	r2, [pc, #216]	; (8001f4c <HAL_TIM_OC_Start_IT+0x284>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_TIM_OC_Start_IT+0x1d8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a34      	ldr	r2, [pc, #208]	; (8001f50 <HAL_TIM_OC_Start_IT+0x288>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00e      	beq.n	8001ea0 <HAL_TIM_OC_Start_IT+0x1d8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a33      	ldr	r2, [pc, #204]	; (8001f54 <HAL_TIM_OC_Start_IT+0x28c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d009      	beq.n	8001ea0 <HAL_TIM_OC_Start_IT+0x1d8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a31      	ldr	r2, [pc, #196]	; (8001f58 <HAL_TIM_OC_Start_IT+0x290>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_TIM_OC_Start_IT+0x1d8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_TIM_OC_Start_IT+0x294>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_TIM_OC_Start_IT+0x1dc>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_TIM_OC_Start_IT+0x1de>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a23      	ldr	r2, [pc, #140]	; (8001f4c <HAL_TIM_OC_Start_IT+0x284>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d01d      	beq.n	8001f00 <HAL_TIM_OC_Start_IT+0x238>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ecc:	d018      	beq.n	8001f00 <HAL_TIM_OC_Start_IT+0x238>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <HAL_TIM_OC_Start_IT+0x298>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <HAL_TIM_OC_Start_IT+0x238>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a21      	ldr	r2, [pc, #132]	; (8001f64 <HAL_TIM_OC_Start_IT+0x29c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00e      	beq.n	8001f00 <HAL_TIM_OC_Start_IT+0x238>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <HAL_TIM_OC_Start_IT+0x2a0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d009      	beq.n	8001f00 <HAL_TIM_OC_Start_IT+0x238>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <HAL_TIM_OC_Start_IT+0x288>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <HAL_TIM_OC_Start_IT+0x238>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <HAL_TIM_OC_Start_IT+0x28c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d115      	bne.n	8001f2c <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_TIM_OC_Start_IT+0x2a4>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d015      	beq.n	8001f3e <HAL_TIM_OC_Start_IT+0x276>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d011      	beq.n	8001f3e <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2a:	e008      	b.n	8001f3e <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e000      	b.n	8001f40 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40012c00 	.word	0x40012c00
 8001f50:	40013400 	.word	0x40013400
 8001f54:	40014000 	.word	0x40014000
 8001f58:	40014400 	.word	0x40014400
 8001f5c:	40014800 	.word	0x40014800
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40000800 	.word	0x40000800
 8001f68:	40000c00 	.word	0x40000c00
 8001f6c:	00010007 	.word	0x00010007

08001f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d020      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0202 	mvn.w	r2, #2
 8001fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fa1d 	bl	80023fa <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe f920 	bl	8000208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fa20 	bl	800240e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d020      	beq.n	8002020 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0204 	mvn.w	r2, #4
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f9f7 	bl	80023fa <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe f8fa 	bl	8000208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f9fa 	bl	800240e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d020      	beq.n	800206c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0208 	mvn.w	r2, #8
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2204      	movs	r2, #4
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f9d1 	bl	80023fa <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe f8d4 	bl	8000208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f9d4 	bl	800240e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d020      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0210 	mvn.w	r2, #16
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2208      	movs	r2, #8
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f9ab 	bl	80023fa <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe f8ae 	bl	8000208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f9ae 	bl	800240e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0201 	mvn.w	r2, #1
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe f876 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00c      	beq.n	8002100 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fe6a 	bl	8002dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fe62 	bl	8002de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00c      	beq.n	8002148 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f96d 	bl	8002422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00c      	beq.n	800216c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0220 	mvn.w	r2, #32
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fe2a 	bl	8002dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_TIM_OC_ConfigChannel+0x1e>
 800218e:	2302      	movs	r3, #2
 8002190:	e066      	b.n	8002260 <HAL_TIM_OC_ConfigChannel+0xec>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b14      	cmp	r3, #20
 800219e:	d857      	bhi.n	8002250 <HAL_TIM_OC_ConfigChannel+0xdc>
 80021a0:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021fd 	.word	0x080021fd
 80021ac:	08002251 	.word	0x08002251
 80021b0:	08002251 	.word	0x08002251
 80021b4:	08002251 	.word	0x08002251
 80021b8:	0800220b 	.word	0x0800220b
 80021bc:	08002251 	.word	0x08002251
 80021c0:	08002251 	.word	0x08002251
 80021c4:	08002251 	.word	0x08002251
 80021c8:	08002219 	.word	0x08002219
 80021cc:	08002251 	.word	0x08002251
 80021d0:	08002251 	.word	0x08002251
 80021d4:	08002251 	.word	0x08002251
 80021d8:	08002227 	.word	0x08002227
 80021dc:	08002251 	.word	0x08002251
 80021e0:	08002251 	.word	0x08002251
 80021e4:	08002251 	.word	0x08002251
 80021e8:	08002235 	.word	0x08002235
 80021ec:	08002251 	.word	0x08002251
 80021f0:	08002251 	.word	0x08002251
 80021f4:	08002251 	.word	0x08002251
 80021f8:	08002243 	.word	0x08002243
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f9be 	bl	8002584 <TIM_OC1_SetConfig>
      break;
 8002208:	e025      	b.n	8002256 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fa47 	bl	80026a4 <TIM_OC2_SetConfig>
      break;
 8002216:	e01e      	b.n	8002256 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 faca 	bl	80027b8 <TIM_OC3_SetConfig>
      break;
 8002224:	e017      	b.n	8002256 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fb4b 	bl	80028c8 <TIM_OC4_SetConfig>
      break;
 8002232:	e010      	b.n	8002256 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fbae 	bl	800299c <TIM_OC5_SetConfig>
      break;
 8002240:	e009      	b.n	8002256 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fc0b 	bl	8002a64 <TIM_OC6_SetConfig>
      break;
 800224e:	e002      	b.n	8002256 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	75fb      	strb	r3, [r7, #23]
      break;
 8002254:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800225e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_TIM_ConfigClockSource+0x1c>
 8002280:	2302      	movs	r3, #2
 8002282:	e0b6      	b.n	80023f2 <HAL_TIM_ConfigClockSource+0x18a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c0:	d03e      	beq.n	8002340 <HAL_TIM_ConfigClockSource+0xd8>
 80022c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c6:	f200 8087 	bhi.w	80023d8 <HAL_TIM_ConfigClockSource+0x170>
 80022ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ce:	f000 8086 	beq.w	80023de <HAL_TIM_ConfigClockSource+0x176>
 80022d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d6:	d87f      	bhi.n	80023d8 <HAL_TIM_ConfigClockSource+0x170>
 80022d8:	2b70      	cmp	r3, #112	; 0x70
 80022da:	d01a      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0xaa>
 80022dc:	2b70      	cmp	r3, #112	; 0x70
 80022de:	d87b      	bhi.n	80023d8 <HAL_TIM_ConfigClockSource+0x170>
 80022e0:	2b60      	cmp	r3, #96	; 0x60
 80022e2:	d050      	beq.n	8002386 <HAL_TIM_ConfigClockSource+0x11e>
 80022e4:	2b60      	cmp	r3, #96	; 0x60
 80022e6:	d877      	bhi.n	80023d8 <HAL_TIM_ConfigClockSource+0x170>
 80022e8:	2b50      	cmp	r3, #80	; 0x50
 80022ea:	d03c      	beq.n	8002366 <HAL_TIM_ConfigClockSource+0xfe>
 80022ec:	2b50      	cmp	r3, #80	; 0x50
 80022ee:	d873      	bhi.n	80023d8 <HAL_TIM_ConfigClockSource+0x170>
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	d058      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x13e>
 80022f4:	2b40      	cmp	r3, #64	; 0x40
 80022f6:	d86f      	bhi.n	80023d8 <HAL_TIM_ConfigClockSource+0x170>
 80022f8:	2b30      	cmp	r3, #48	; 0x30
 80022fa:	d064      	beq.n	80023c6 <HAL_TIM_ConfigClockSource+0x15e>
 80022fc:	2b30      	cmp	r3, #48	; 0x30
 80022fe:	d86b      	bhi.n	80023d8 <HAL_TIM_ConfigClockSource+0x170>
 8002300:	2b20      	cmp	r3, #32
 8002302:	d060      	beq.n	80023c6 <HAL_TIM_ConfigClockSource+0x15e>
 8002304:	2b20      	cmp	r3, #32
 8002306:	d867      	bhi.n	80023d8 <HAL_TIM_ConfigClockSource+0x170>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d05c      	beq.n	80023c6 <HAL_TIM_ConfigClockSource+0x15e>
 800230c:	2b10      	cmp	r3, #16
 800230e:	d05a      	beq.n	80023c6 <HAL_TIM_ConfigClockSource+0x15e>
 8002310:	e062      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002322:	f000 fc7f 	bl	8002c24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	609a      	str	r2, [r3, #8]
      break;
 800233e:	e04f      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002350:	f000 fc68 	bl	8002c24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002362:	609a      	str	r2, [r3, #8]
      break;
 8002364:	e03c      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002372:	461a      	mov	r2, r3
 8002374:	f000 fbdc 	bl	8002b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2150      	movs	r1, #80	; 0x50
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fc35 	bl	8002bee <TIM_ITRx_SetConfig>
      break;
 8002384:	e02c      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002392:	461a      	mov	r2, r3
 8002394:	f000 fbfb 	bl	8002b8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2160      	movs	r1, #96	; 0x60
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fc25 	bl	8002bee <TIM_ITRx_SetConfig>
      break;
 80023a4:	e01c      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b2:	461a      	mov	r2, r3
 80023b4:	f000 fbbc 	bl	8002b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2140      	movs	r1, #64	; 0x40
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fc15 	bl	8002bee <TIM_ITRx_SetConfig>
      break;
 80023c4:	e00c      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4610      	mov	r0, r2
 80023d2:	f000 fc0c 	bl	8002bee <TIM_ITRx_SetConfig>
      break;
 80023d6:	e003      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      break;
 80023dc:	e000      	b.n	80023e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80023de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7f1b      	ldrb	r3, [r3, #28]
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a40      	ldr	r2, [pc, #256]	; (8002564 <TIM_Base_SetConfig+0x114>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246e:	d00f      	beq.n	8002490 <TIM_Base_SetConfig+0x40>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3d      	ldr	r2, [pc, #244]	; (8002568 <TIM_Base_SetConfig+0x118>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00b      	beq.n	8002490 <TIM_Base_SetConfig+0x40>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3c      	ldr	r2, [pc, #240]	; (800256c <TIM_Base_SetConfig+0x11c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <TIM_Base_SetConfig+0x40>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3b      	ldr	r2, [pc, #236]	; (8002570 <TIM_Base_SetConfig+0x120>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <TIM_Base_SetConfig+0x40>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a3a      	ldr	r2, [pc, #232]	; (8002574 <TIM_Base_SetConfig+0x124>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d108      	bne.n	80024a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2f      	ldr	r2, [pc, #188]	; (8002564 <TIM_Base_SetConfig+0x114>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01f      	beq.n	80024ea <TIM_Base_SetConfig+0x9a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b0:	d01b      	beq.n	80024ea <TIM_Base_SetConfig+0x9a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a2c      	ldr	r2, [pc, #176]	; (8002568 <TIM_Base_SetConfig+0x118>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d017      	beq.n	80024ea <TIM_Base_SetConfig+0x9a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a2b      	ldr	r2, [pc, #172]	; (800256c <TIM_Base_SetConfig+0x11c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <TIM_Base_SetConfig+0x9a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <TIM_Base_SetConfig+0x120>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00f      	beq.n	80024ea <TIM_Base_SetConfig+0x9a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a29      	ldr	r2, [pc, #164]	; (8002574 <TIM_Base_SetConfig+0x124>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00b      	beq.n	80024ea <TIM_Base_SetConfig+0x9a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a28      	ldr	r2, [pc, #160]	; (8002578 <TIM_Base_SetConfig+0x128>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <TIM_Base_SetConfig+0x9a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a27      	ldr	r2, [pc, #156]	; (800257c <TIM_Base_SetConfig+0x12c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d003      	beq.n	80024ea <TIM_Base_SetConfig+0x9a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a26      	ldr	r2, [pc, #152]	; (8002580 <TIM_Base_SetConfig+0x130>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d108      	bne.n	80024fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <TIM_Base_SetConfig+0x114>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00f      	beq.n	8002548 <TIM_Base_SetConfig+0xf8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a12      	ldr	r2, [pc, #72]	; (8002574 <TIM_Base_SetConfig+0x124>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00b      	beq.n	8002548 <TIM_Base_SetConfig+0xf8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a11      	ldr	r2, [pc, #68]	; (8002578 <TIM_Base_SetConfig+0x128>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <TIM_Base_SetConfig+0xf8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <TIM_Base_SetConfig+0x12c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d003      	beq.n	8002548 <TIM_Base_SetConfig+0xf8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <TIM_Base_SetConfig+0x130>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d103      	bne.n	8002550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	615a      	str	r2, [r3, #20]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800
 8002570:	40000c00 	.word	0x40000c00
 8002574:	40013400 	.word	0x40013400
 8002578:	40014000 	.word	0x40014000
 800257c:	40014400 	.word	0x40014400
 8002580:	40014800 	.word	0x40014800

08002584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f023 0201 	bic.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f023 0302 	bic.w	r3, r3, #2
 80025d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a2c      	ldr	r2, [pc, #176]	; (8002690 <TIM_OC1_SetConfig+0x10c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00f      	beq.n	8002604 <TIM_OC1_SetConfig+0x80>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a2b      	ldr	r2, [pc, #172]	; (8002694 <TIM_OC1_SetConfig+0x110>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00b      	beq.n	8002604 <TIM_OC1_SetConfig+0x80>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a2a      	ldr	r2, [pc, #168]	; (8002698 <TIM_OC1_SetConfig+0x114>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d007      	beq.n	8002604 <TIM_OC1_SetConfig+0x80>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a29      	ldr	r2, [pc, #164]	; (800269c <TIM_OC1_SetConfig+0x118>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <TIM_OC1_SetConfig+0x80>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a28      	ldr	r2, [pc, #160]	; (80026a0 <TIM_OC1_SetConfig+0x11c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d10c      	bne.n	800261e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f023 0308 	bic.w	r3, r3, #8
 800260a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1b      	ldr	r2, [pc, #108]	; (8002690 <TIM_OC1_SetConfig+0x10c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00f      	beq.n	8002646 <TIM_OC1_SetConfig+0xc2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <TIM_OC1_SetConfig+0x110>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <TIM_OC1_SetConfig+0xc2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a19      	ldr	r2, [pc, #100]	; (8002698 <TIM_OC1_SetConfig+0x114>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <TIM_OC1_SetConfig+0xc2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a18      	ldr	r2, [pc, #96]	; (800269c <TIM_OC1_SetConfig+0x118>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d003      	beq.n	8002646 <TIM_OC1_SetConfig+0xc2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <TIM_OC1_SetConfig+0x11c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d111      	bne.n	800266a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800264c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	621a      	str	r2, [r3, #32]
}
 8002684:	bf00      	nop
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40012c00 	.word	0x40012c00
 8002694:	40013400 	.word	0x40013400
 8002698:	40014000 	.word	0x40014000
 800269c:	40014400 	.word	0x40014400
 80026a0:	40014800 	.word	0x40014800

080026a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f023 0210 	bic.w	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 0320 	bic.w	r3, r3, #32
 80026f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <TIM_OC2_SetConfig+0x100>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d003      	beq.n	8002710 <TIM_OC2_SetConfig+0x6c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <TIM_OC2_SetConfig+0x104>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d10d      	bne.n	800272c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800272a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <TIM_OC2_SetConfig+0x100>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00f      	beq.n	8002754 <TIM_OC2_SetConfig+0xb0>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <TIM_OC2_SetConfig+0x104>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00b      	beq.n	8002754 <TIM_OC2_SetConfig+0xb0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <TIM_OC2_SetConfig+0x108>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <TIM_OC2_SetConfig+0xb0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <TIM_OC2_SetConfig+0x10c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <TIM_OC2_SetConfig+0xb0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <TIM_OC2_SetConfig+0x110>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d113      	bne.n	800277c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800275a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	621a      	str	r2, [r3, #32]
}
 8002796:	bf00      	nop
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40013400 	.word	0x40013400
 80027ac:	40014000 	.word	0x40014000
 80027b0:	40014400 	.word	0x40014400
 80027b4:	40014800 	.word	0x40014800

080027b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <TIM_OC3_SetConfig+0xfc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_OC3_SetConfig+0x6a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <TIM_OC3_SetConfig+0x100>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10d      	bne.n	800283e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800283c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <TIM_OC3_SetConfig+0xfc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00f      	beq.n	8002866 <TIM_OC3_SetConfig+0xae>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <TIM_OC3_SetConfig+0x100>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00b      	beq.n	8002866 <TIM_OC3_SetConfig+0xae>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <TIM_OC3_SetConfig+0x104>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <TIM_OC3_SetConfig+0xae>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <TIM_OC3_SetConfig+0x108>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d003      	beq.n	8002866 <TIM_OC3_SetConfig+0xae>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <TIM_OC3_SetConfig+0x10c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d113      	bne.n	800288e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800286c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	621a      	str	r2, [r3, #32]
}
 80028a8:	bf00      	nop
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40013400 	.word	0x40013400
 80028bc:	40014000 	.word	0x40014000
 80028c0:	40014400 	.word	0x40014400
 80028c4:	40014800 	.word	0x40014800

080028c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	031b      	lsls	r3, r3, #12
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a18      	ldr	r2, [pc, #96]	; (8002988 <TIM_OC4_SetConfig+0xc0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00f      	beq.n	800294c <TIM_OC4_SetConfig+0x84>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a17      	ldr	r2, [pc, #92]	; (800298c <TIM_OC4_SetConfig+0xc4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00b      	beq.n	800294c <TIM_OC4_SetConfig+0x84>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a16      	ldr	r2, [pc, #88]	; (8002990 <TIM_OC4_SetConfig+0xc8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d007      	beq.n	800294c <TIM_OC4_SetConfig+0x84>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a15      	ldr	r2, [pc, #84]	; (8002994 <TIM_OC4_SetConfig+0xcc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d003      	beq.n	800294c <TIM_OC4_SetConfig+0x84>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a14      	ldr	r2, [pc, #80]	; (8002998 <TIM_OC4_SetConfig+0xd0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d109      	bne.n	8002960 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	019b      	lsls	r3, r3, #6
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	621a      	str	r2, [r3, #32]
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40013400 	.word	0x40013400
 8002990:	40014000 	.word	0x40014000
 8002994:	40014400 	.word	0x40014400
 8002998:	40014800 	.word	0x40014800

0800299c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80029e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <TIM_OC5_SetConfig+0xb4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00f      	beq.n	8002a16 <TIM_OC5_SetConfig+0x7a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <TIM_OC5_SetConfig+0xb8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00b      	beq.n	8002a16 <TIM_OC5_SetConfig+0x7a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <TIM_OC5_SetConfig+0xbc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <TIM_OC5_SetConfig+0x7a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <TIM_OC5_SetConfig+0xc0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_OC5_SetConfig+0x7a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <TIM_OC5_SetConfig+0xc4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d109      	bne.n	8002a2a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	621a      	str	r2, [r3, #32]
}
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40013400 	.word	0x40013400
 8002a58:	40014000 	.word	0x40014000
 8002a5c:	40014400 	.word	0x40014400
 8002a60:	40014800 	.word	0x40014800

08002a64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	051b      	lsls	r3, r3, #20
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <TIM_OC6_SetConfig+0xb8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00f      	beq.n	8002ae0 <TIM_OC6_SetConfig+0x7c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <TIM_OC6_SetConfig+0xbc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00b      	beq.n	8002ae0 <TIM_OC6_SetConfig+0x7c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <TIM_OC6_SetConfig+0xc0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <TIM_OC6_SetConfig+0x7c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <TIM_OC6_SetConfig+0xc4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_OC6_SetConfig+0x7c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <TIM_OC6_SetConfig+0xc8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d109      	bne.n	8002af4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	029b      	lsls	r3, r3, #10
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	621a      	str	r2, [r3, #32]
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40013400 	.word	0x40013400
 8002b24:	40014000 	.word	0x40014000
 8002b28:	40014400 	.word	0x40014400
 8002b2c:	40014800 	.word	0x40014800

08002b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f023 0201 	bic.w	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f023 030a 	bic.w	r3, r3, #10
 8002b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	621a      	str	r2, [r3, #32]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b087      	sub	sp, #28
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f023 0210 	bic.w	r2, r3, #16
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	031b      	lsls	r3, r3, #12
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	621a      	str	r2, [r3, #32]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f043 0307 	orr.w	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	021a      	lsls	r2, r3, #8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2201      	movs	r2, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1a      	ldr	r2, [r3, #32]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	621a      	str	r2, [r3, #32]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e068      	b.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2e      	ldr	r2, [pc, #184]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2d      	ldr	r2, [pc, #180]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01d      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3a:	d018      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a13      	ldr	r2, [pc, #76]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10c      	bne.n	8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40013400 	.word	0x40013400
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800
 8002db8:	40000c00 	.word	0x40000c00
 8002dbc:	40014000 	.word	0x40014000

08002dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <memset>:
 8002dfc:	4402      	add	r2, r0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d100      	bne.n	8002e06 <memset+0xa>
 8002e04:	4770      	bx	lr
 8002e06:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0a:	e7f9      	b.n	8002e00 <memset+0x4>

08002e0c <__libc_init_array>:
 8002e0c:	b570      	push	{r4, r5, r6, lr}
 8002e0e:	4d0d      	ldr	r5, [pc, #52]	; (8002e44 <__libc_init_array+0x38>)
 8002e10:	4c0d      	ldr	r4, [pc, #52]	; (8002e48 <__libc_init_array+0x3c>)
 8002e12:	1b64      	subs	r4, r4, r5
 8002e14:	10a4      	asrs	r4, r4, #2
 8002e16:	2600      	movs	r6, #0
 8002e18:	42a6      	cmp	r6, r4
 8002e1a:	d109      	bne.n	8002e30 <__libc_init_array+0x24>
 8002e1c:	4d0b      	ldr	r5, [pc, #44]	; (8002e4c <__libc_init_array+0x40>)
 8002e1e:	4c0c      	ldr	r4, [pc, #48]	; (8002e50 <__libc_init_array+0x44>)
 8002e20:	f000 f818 	bl	8002e54 <_init>
 8002e24:	1b64      	subs	r4, r4, r5
 8002e26:	10a4      	asrs	r4, r4, #2
 8002e28:	2600      	movs	r6, #0
 8002e2a:	42a6      	cmp	r6, r4
 8002e2c:	d105      	bne.n	8002e3a <__libc_init_array+0x2e>
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
 8002e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e34:	4798      	blx	r3
 8002e36:	3601      	adds	r6, #1
 8002e38:	e7ee      	b.n	8002e18 <__libc_init_array+0xc>
 8002e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3e:	4798      	blx	r3
 8002e40:	3601      	adds	r6, #1
 8002e42:	e7f2      	b.n	8002e2a <__libc_init_array+0x1e>
 8002e44:	08002eac 	.word	0x08002eac
 8002e48:	08002eac 	.word	0x08002eac
 8002e4c:	08002eac 	.word	0x08002eac
 8002e50:	08002eb0 	.word	0x08002eb0

08002e54 <_init>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr

08002e60 <_fini>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr
