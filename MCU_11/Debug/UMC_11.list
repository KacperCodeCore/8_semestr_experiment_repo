
UMC_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002ea0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002ea0  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ec3  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f9  00000000  00000000  00029f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a6  00000000  00000000  0002c278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e64  00000000  00000000  0002cb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc1c  00000000  00000000  00052982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecea9  00000000  00000000  0005e59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e60  00000000  00000000  0014b448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e34 	.word	0x08002e34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002e34 	.word	0x08002e34

080001c8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 if (htim == &htim6) {
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d112      	bne.n	80001fe <HAL_TIM_PeriodElapsedCallback+0x36>
 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001d8:	2120      	movs	r1, #32
 80001da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001de:	f000 fe43 	bl	8000e68 <HAL_GPIO_TogglePin>

 HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80001e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e6:	4809      	ldr	r0, [pc, #36]	; (800020c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80001e8:	f000 fe3e 	bl	8000e68 <HAL_GPIO_TogglePin>
 HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80001ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f0:	4807      	ldr	r0, [pc, #28]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80001f2:	f000 fe39 	bl	8000e68 <HAL_GPIO_TogglePin>
 HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80001f6:	2140      	movs	r1, #64	; 0x40
 80001f8:	4805      	ldr	r0, [pc, #20]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80001fa:	f000 fe35 	bl	8000e68 <HAL_GPIO_TogglePin>

// led_set(1, true);
// led_set(2, true);
// led_set(3, true);
 }
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000074 	.word	0x20000074
 800020c:	48000400 	.word	0x48000400
 8000210:	48000800 	.word	0x48000800

08000214 <led_set>:



void led_set(int led, bool turn_on)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
 GPIO_PinState state = (turn_on) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	73fb      	strb	r3, [r7, #15]
 switch (led) {
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2b03      	cmp	r3, #3
 8000228:	d023      	beq.n	8000272 <led_set+0x5e>
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b03      	cmp	r3, #3
 800022e:	dc2c      	bgt.n	800028a <led_set+0x76>
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d003      	beq.n	800023e <led_set+0x2a>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2b02      	cmp	r3, #2
 800023a:	d00d      	beq.n	8000258 <led_set+0x44>
 break;
 case 3:
 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, !state);
 break;
 default:
 break;
 800023c:	e025      	b.n	800028a <led_set+0x76>
 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, !state);
 800023e:	7bfb      	ldrb	r3, [r7, #15]
 8000240:	2b00      	cmp	r3, #0
 8000242:	bf0c      	ite	eq
 8000244:	2301      	moveq	r3, #1
 8000246:	2300      	movne	r3, #0
 8000248:	b2db      	uxtb	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000250:	4810      	ldr	r0, [pc, #64]	; (8000294 <led_set+0x80>)
 8000252:	f000 fdf1 	bl	8000e38 <HAL_GPIO_WritePin>
 break;
 8000256:	e019      	b.n	800028c <led_set+0x78>
 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !state);
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	2b00      	cmp	r3, #0
 800025c:	bf0c      	ite	eq
 800025e:	2301      	moveq	r3, #1
 8000260:	2300      	movne	r3, #0
 8000262:	b2db      	uxtb	r3, r3
 8000264:	461a      	mov	r2, r3
 8000266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026a:	480b      	ldr	r0, [pc, #44]	; (8000298 <led_set+0x84>)
 800026c:	f000 fde4 	bl	8000e38 <HAL_GPIO_WritePin>
 break;
 8000270:	e00c      	b.n	800028c <led_set+0x78>
 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, !state);
 8000272:	7bfb      	ldrb	r3, [r7, #15]
 8000274:	2b00      	cmp	r3, #0
 8000276:	bf0c      	ite	eq
 8000278:	2301      	moveq	r3, #1
 800027a:	2300      	movne	r3, #0
 800027c:	b2db      	uxtb	r3, r3
 800027e:	461a      	mov	r2, r3
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	4805      	ldr	r0, [pc, #20]	; (8000298 <led_set+0x84>)
 8000284:	f000 fdd8 	bl	8000e38 <HAL_GPIO_WritePin>
 break;
 8000288:	e000      	b.n	800028c <led_set+0x78>
 break;
 800028a:	bf00      	nop
 }
}
 800028c:	bf00      	nop
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	48000400 	.word	0x48000400
 8000298:	48000800 	.word	0x48000800

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a0:	f000 fa99 	bl	80007d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a4:	f000 f824 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a8:	f000 f938 	bl	800051c <MX_GPIO_Init>
  MX_TIM6_Init();
 80002ac:	f000 f8fe 	bl	80004ac <MX_TIM6_Init>
  MX_TIM3_Init();
 80002b0:	f000 f870 	bl	8000394 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <main+0x50>)
 80002b6:	f001 fc75 	bl	8001ba4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim6, TIM_CHANNEL_1);
 80002ba:	2100      	movs	r1, #0
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <main+0x50>)
 80002be:	f001 fd43 	bl	8001d48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim6, TIM_CHANNEL_2);
 80002c2:	2104      	movs	r1, #4
 80002c4:	4809      	ldr	r0, [pc, #36]	; (80002ec <main+0x50>)
 80002c6:	f001 fd3f 	bl	8001d48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim6, TIM_CHANNEL_3);
 80002ca:	2108      	movs	r1, #8
 80002cc:	4807      	ldr	r0, [pc, #28]	; (80002ec <main+0x50>)
 80002ce:	f001 fd3b 	bl	8001d48 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	   led_set(1, true);
 80002d2:	2101      	movs	r1, #1
 80002d4:	2001      	movs	r0, #1
 80002d6:	f7ff ff9d 	bl	8000214 <led_set>
	   led_set(2, true);
 80002da:	2101      	movs	r1, #1
 80002dc:	2002      	movs	r0, #2
 80002de:	f7ff ff99 	bl	8000214 <led_set>
	   led_set(3, true);
 80002e2:	2101      	movs	r1, #1
 80002e4:	2003      	movs	r0, #3
 80002e6:	f7ff ff95 	bl	8000214 <led_set>
	   led_set(1, true);
 80002ea:	e7f2      	b.n	80002d2 <main+0x36>
 80002ec:	20000074 	.word	0x20000074

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b096      	sub	sp, #88	; 0x58
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	2244      	movs	r2, #68	; 0x44
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fd6c 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	463b      	mov	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000312:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000316:	f000 fdcf 	bl	8000eb8 <HAL_PWREx_ControlVoltageScaling>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000320:	f000 f974 	bl	800060c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000324:	2310      	movs	r3, #16
 8000326:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000330:	2360      	movs	r3, #96	; 0x60
 8000332:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000334:	2302      	movs	r3, #2
 8000336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000338:	2301      	movs	r3, #1
 800033a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800033c:	2301      	movs	r3, #1
 800033e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000340:	2328      	movs	r3, #40	; 0x28
 8000342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000344:	2307      	movs	r3, #7
 8000346:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000348:	2302      	movs	r3, #2
 800034a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800034c:	2302      	movs	r3, #2
 800034e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fe05 	bl	8000f64 <HAL_RCC_OscConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000360:	f000 f954 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000364:	230f      	movs	r3, #15
 8000366:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000368:	2303      	movs	r3, #3
 800036a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000378:	463b      	mov	r3, r7
 800037a:	2104      	movs	r1, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f001 f9cd 	bl	800171c <HAL_RCC_ClockConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000388:	f000 f940 	bl	800060c <Error_Handler>
  }
}
 800038c:	bf00      	nop
 800038e:	3758      	adds	r7, #88	; 0x58
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08e      	sub	sp, #56	; 0x38
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a8:	f107 031c 	add.w	r3, r7, #28
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b4:	463b      	mov	r3, r7
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]
 80003c2:	615a      	str	r2, [r3, #20]
 80003c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003c6:	4b37      	ldr	r3, [pc, #220]	; (80004a4 <MX_TIM3_Init+0x110>)
 80003c8:	4a37      	ldr	r2, [pc, #220]	; (80004a8 <MX_TIM3_Init+0x114>)
 80003ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80003cc:	4b35      	ldr	r3, [pc, #212]	; (80004a4 <MX_TIM3_Init+0x110>)
 80003ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d4:	4b33      	ldr	r3, [pc, #204]	; (80004a4 <MX_TIM3_Init+0x110>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80003da:	4b32      	ldr	r3, [pc, #200]	; (80004a4 <MX_TIM3_Init+0x110>)
 80003dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80003e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e2:	4b30      	ldr	r3, [pc, #192]	; (80004a4 <MX_TIM3_Init+0x110>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e8:	4b2e      	ldr	r3, [pc, #184]	; (80004a4 <MX_TIM3_Init+0x110>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003ee:	482d      	ldr	r0, [pc, #180]	; (80004a4 <MX_TIM3_Init+0x110>)
 80003f0:	f001 fb80 	bl	8001af4 <HAL_TIM_Base_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80003fa:	f000 f907 	bl	800060c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000402:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000408:	4619      	mov	r1, r3
 800040a:	4826      	ldr	r0, [pc, #152]	; (80004a4 <MX_TIM3_Init+0x110>)
 800040c:	f001 ff1e 	bl	800224c <HAL_TIM_ConfigClockSource>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000416:	f000 f8f9 	bl	800060c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800041a:	4822      	ldr	r0, [pc, #136]	; (80004a4 <MX_TIM3_Init+0x110>)
 800041c:	f001 fc32 	bl	8001c84 <HAL_TIM_OC_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000426:	f000 f8f1 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042e:	2300      	movs	r3, #0
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000432:	f107 031c 	add.w	r3, r7, #28
 8000436:	4619      	mov	r1, r3
 8000438:	481a      	ldr	r0, [pc, #104]	; (80004a4 <MX_TIM3_Init+0x110>)
 800043a:	f002 fc29 	bl	8002c90 <HAL_TIMEx_MasterConfigSynchronization>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000444:	f000 f8e2 	bl	800060c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000448:	2300      	movs	r3, #0
 800044a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000450:	2300      	movs	r3, #0
 8000452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000458:	463b      	mov	r3, r7
 800045a:	2200      	movs	r2, #0
 800045c:	4619      	mov	r1, r3
 800045e:	4811      	ldr	r0, [pc, #68]	; (80004a4 <MX_TIM3_Init+0x110>)
 8000460:	f001 fe7a 	bl	8002158 <HAL_TIM_OC_ConfigChannel>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800046a:	f000 f8cf 	bl	800060c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800046e:	463b      	mov	r3, r7
 8000470:	2204      	movs	r2, #4
 8000472:	4619      	mov	r1, r3
 8000474:	480b      	ldr	r0, [pc, #44]	; (80004a4 <MX_TIM3_Init+0x110>)
 8000476:	f001 fe6f 	bl	8002158 <HAL_TIM_OC_ConfigChannel>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000480:	f000 f8c4 	bl	800060c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000484:	463b      	mov	r3, r7
 8000486:	2208      	movs	r2, #8
 8000488:	4619      	mov	r1, r3
 800048a:	4806      	ldr	r0, [pc, #24]	; (80004a4 <MX_TIM3_Init+0x110>)
 800048c:	f001 fe64 	bl	8002158 <HAL_TIM_OC_ConfigChannel>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000496:	f000 f8b9 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	3738      	adds	r7, #56	; 0x38
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000028 	.word	0x20000028
 80004a8:	40000400 	.word	0x40000400

080004ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_TIM6_Init+0x68>)
 80004be:	4a16      	ldr	r2, [pc, #88]	; (8000518 <MX_TIM6_Init+0x6c>)
 80004c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_TIM6_Init+0x68>)
 80004c4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_TIM6_Init+0x68>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80004d0:	4b10      	ldr	r3, [pc, #64]	; (8000514 <MX_TIM6_Init+0x68>)
 80004d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80004d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_TIM6_Init+0x68>)
 80004da:	2200      	movs	r2, #0
 80004dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004de:	480d      	ldr	r0, [pc, #52]	; (8000514 <MX_TIM6_Init+0x68>)
 80004e0:	f001 fb08 	bl	8001af4 <HAL_TIM_Base_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80004ea:	f000 f88f 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <MX_TIM6_Init+0x68>)
 80004fc:	f002 fbc8 	bl	8002c90 <HAL_TIMEx_MasterConfigSynchronization>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000506:	f000 f881 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000074 	.word	0x20000074
 8000518:	40001000 	.word	0x40001000

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b33      	ldr	r3, [pc, #204]	; (8000600 <MX_GPIO_Init+0xe4>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a32      	ldr	r2, [pc, #200]	; (8000600 <MX_GPIO_Init+0xe4>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b30      	ldr	r3, [pc, #192]	; (8000600 <MX_GPIO_Init+0xe4>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <MX_GPIO_Init+0xe4>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	4a2c      	ldr	r2, [pc, #176]	; (8000600 <MX_GPIO_Init+0xe4>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000556:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <MX_GPIO_Init+0xe4>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <MX_GPIO_Init+0xe4>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4a26      	ldr	r2, [pc, #152]	; (8000600 <MX_GPIO_Init+0xe4>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <MX_GPIO_Init+0xe4>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fc59 	bl	8000e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 7110 	mov.w	r1, #576	; 0x240
 800058c:	481d      	ldr	r0, [pc, #116]	; (8000604 <MX_GPIO_Init+0xe8>)
 800058e:	f000 fc53 	bl	8000e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000598:	481b      	ldr	r0, [pc, #108]	; (8000608 <MX_GPIO_Init+0xec>)
 800059a:	f000 fc4d 	bl	8000e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800059e:	2320      	movs	r3, #32
 80005a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f000 fa94 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80005bc:	f44f 7310 	mov.w	r3, #576	; 0x240
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <MX_GPIO_Init+0xe8>)
 80005d6:	f000 fa85 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80005da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_GPIO_Init+0xec>)
 80005f4:	f000 fa76 	bl	8000ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	48000800 	.word	0x48000800
 8000608:	48000400 	.word	0x48000400

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_MspInit+0x44>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_MspInit+0x44>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6613      	str	r3, [r2, #96]	; 0x60
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_MspInit+0x44>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_MspInit+0x44>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_MspInit+0x44>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6593      	str	r3, [r2, #88]	; 0x58
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_MspInit+0x44>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <HAL_TIM_Base_MspInit+0x78>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d114      	bne.n	800069c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <HAL_TIM_Base_MspInit+0x7c>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000676:	4a19      	ldr	r2, [pc, #100]	; (80006dc <HAL_TIM_Base_MspInit+0x7c>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	6593      	str	r3, [r2, #88]	; 0x58
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_TIM_Base_MspInit+0x7c>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	210a      	movs	r1, #10
 800068e:	201d      	movs	r0, #29
 8000690:	f000 f9f1 	bl	8000a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000694:	201d      	movs	r0, #29
 8000696:	f000 fa0a 	bl	8000aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800069a:	e018      	b.n	80006ce <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <HAL_TIM_Base_MspInit+0x80>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d113      	bne.n	80006ce <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <HAL_TIM_Base_MspInit+0x7c>)
 80006a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006aa:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <HAL_TIM_Base_MspInit+0x7c>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6593      	str	r3, [r2, #88]	; 0x58
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_TIM_Base_MspInit+0x7c>)
 80006b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b6:	f003 0310 	and.w	r3, r3, #16
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2107      	movs	r1, #7
 80006c2:	2036      	movs	r0, #54	; 0x36
 80006c4:	f000 f9d7 	bl	8000a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006c8:	2036      	movs	r0, #54	; 0x36
 80006ca:	f000 f9f0 	bl	8000aae <HAL_NVIC_EnableIRQ>
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40000400 	.word	0x40000400
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40001000 	.word	0x40001000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f8a6 	bl	8000880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <TIM3_IRQHandler+0x10>)
 800073e:	f001 fc09 	bl	8001f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000028 	.word	0x20000028

0800074c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <TIM6_DAC_IRQHandler+0x10>)
 8000752:	f001 fbff 	bl	8001f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000074 	.word	0x20000074

08000760 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <SystemInit+0x20>)
 8000766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <SystemInit+0x20>)
 800076c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000788:	f7ff ffea 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800078e:	490d      	ldr	r1, [pc, #52]	; (80007c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <LoopForever+0xe>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a4:	4c0a      	ldr	r4, [pc, #40]	; (80007d0 <LoopForever+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b2:	f002 fb1b 	bl	8002dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007b6:	f7ff fd71 	bl	800029c <main>

080007ba <LoopForever>:

LoopForever:
    b LoopForever
 80007ba:	e7fe      	b.n	80007ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c8:	08002e94 	.word	0x08002e94
  ldr r2, =_sbss
 80007cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d0:	200000c4 	.word	0x200000c4

080007d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC1_2_IRQHandler>

080007d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007dc:	2300      	movs	r3, #0
 80007de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 f93d 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e6:	200f      	movs	r0, #15
 80007e8:	f000 f80e 	bl	8000808 <HAL_InitTick>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d002      	beq.n	80007f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	71fb      	strb	r3, [r7, #7]
 80007f6:	e001      	b.n	80007fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007f8:	f7ff ff0e 	bl	8000618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000810:	2300      	movs	r3, #0
 8000812:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_InitTick+0x6c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d023      	beq.n	8000864 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_InitTick+0x70>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_InitTick+0x6c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	fbb3 f3f1 	udiv	r3, r3, r1
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f949 	bl	8000aca <HAL_SYSTICK_Config>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10f      	bne.n	800085e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d809      	bhi.n	8000858 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000844:	2200      	movs	r2, #0
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f000 f913 	bl	8000a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_InitTick+0x74>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	e007      	b.n	8000868 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e004      	b.n	8000868 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]
 8000862:	e001      	b.n	8000868 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000864:	2301      	movs	r3, #1
 8000866:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000868:	7bfb      	ldrb	r3, [r7, #15]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008
 8000878:	20000000 	.word	0x20000000
 800087c:	20000004 	.word	0x20000004

08000880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_IncTick+0x20>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_IncTick+0x24>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_IncTick+0x24>)
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000008 	.word	0x20000008
 80008a4:	200000c0 	.word	0x200000c0

080008a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HAL_GetTick+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	200000c0 	.word	0x200000c0

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db0b      	blt.n	800094e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 021f 	and.w	r2, r3, #31
 800093c:	4907      	ldr	r1, [pc, #28]	; (800095c <__NVIC_EnableIRQ+0x38>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	2001      	movs	r0, #1
 8000946:	fa00 f202 	lsl.w	r2, r0, r2
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e100 	.word	0xe000e100

08000960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	db0a      	blt.n	800098a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <__NVIC_SetPriority+0x4c>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	0112      	lsls	r2, r2, #4
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	440b      	add	r3, r1
 8000984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000988:	e00a      	b.n	80009a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4908      	ldr	r1, [pc, #32]	; (80009b0 <__NVIC_SetPriority+0x50>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	3b04      	subs	r3, #4
 8000998:	0112      	lsls	r2, r2, #4
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	440b      	add	r3, r1
 800099e:	761a      	strb	r2, [r3, #24]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f1c3 0307 	rsb	r3, r3, #7
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	bf28      	it	cs
 80009d2:	2304      	movcs	r3, #4
 80009d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3304      	adds	r3, #4
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d902      	bls.n	80009e4 <NVIC_EncodePriority+0x30>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3b03      	subs	r3, #3
 80009e2:	e000      	b.n	80009e6 <NVIC_EncodePriority+0x32>
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43da      	mvns	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	401a      	ands	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43d9      	mvns	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	4313      	orrs	r3, r2
         );
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a2c:	d301      	bcc.n	8000a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00f      	b.n	8000a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <SysTick_Config+0x40>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f7ff ff8e 	bl	8000960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x40>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff29 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a88:	f7ff ff3e 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f7ff ff8e 	bl	80009b4 <NVIC_EncodePriority>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff5d 	bl	8000960 <__NVIC_SetPriority>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff31 	bl	8000924 <__NVIC_EnableIRQ>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ffa2 	bl	8000a1c <SysTick_Config>
 8000ad8:	4603      	mov	r3, r0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b087      	sub	sp, #28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	e17f      	b.n	8000df4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	2101      	movs	r1, #1
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	fa01 f303 	lsl.w	r3, r1, r3
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 8171 	beq.w	8000dee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d005      	beq.n	8000b24 <HAL_GPIO_Init+0x40>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d130      	bne.n	8000b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	2203      	movs	r2, #3
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	f003 0201 	and.w	r2, r3, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d118      	bne.n	8000bc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b98:	2201      	movs	r2, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	f003 0201 	and.w	r2, r3, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d017      	beq.n	8000c00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d123      	bne.n	8000c54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	08da      	lsrs	r2, r3, #3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3208      	adds	r2, #8
 8000c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	08da      	lsrs	r2, r3, #3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3208      	adds	r2, #8
 8000c4e:	6939      	ldr	r1, [r7, #16]
 8000c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0203 	and.w	r2, r3, #3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80ac 	beq.w	8000dee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b5f      	ldr	r3, [pc, #380]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	4a5e      	ldr	r2, [pc, #376]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca2:	4b5c      	ldr	r3, [pc, #368]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cae:	4a5a      	ldr	r2, [pc, #360]	; (8000e18 <HAL_GPIO_Init+0x334>)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cd8:	d025      	beq.n	8000d26 <HAL_GPIO_Init+0x242>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a4f      	ldr	r2, [pc, #316]	; (8000e1c <HAL_GPIO_Init+0x338>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d01f      	beq.n	8000d22 <HAL_GPIO_Init+0x23e>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4e      	ldr	r2, [pc, #312]	; (8000e20 <HAL_GPIO_Init+0x33c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d019      	beq.n	8000d1e <HAL_GPIO_Init+0x23a>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4d      	ldr	r2, [pc, #308]	; (8000e24 <HAL_GPIO_Init+0x340>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d013      	beq.n	8000d1a <HAL_GPIO_Init+0x236>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4c      	ldr	r2, [pc, #304]	; (8000e28 <HAL_GPIO_Init+0x344>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d00d      	beq.n	8000d16 <HAL_GPIO_Init+0x232>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4b      	ldr	r2, [pc, #300]	; (8000e2c <HAL_GPIO_Init+0x348>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d007      	beq.n	8000d12 <HAL_GPIO_Init+0x22e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4a      	ldr	r2, [pc, #296]	; (8000e30 <HAL_GPIO_Init+0x34c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d101      	bne.n	8000d0e <HAL_GPIO_Init+0x22a>
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	e00c      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d0e:	2307      	movs	r3, #7
 8000d10:	e00a      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d12:	2305      	movs	r3, #5
 8000d14:	e008      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d16:	2304      	movs	r3, #4
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e004      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d26:	2300      	movs	r3, #0
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	f002 0203 	and.w	r2, r2, #3
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4093      	lsls	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d38:	4937      	ldr	r1, [pc, #220]	; (8000e18 <HAL_GPIO_Init+0x334>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d46:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d6a:	4a32      	ldr	r2, [pc, #200]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d70:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dbe:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f47f ae78 	bne.w	8000af4 <HAL_GPIO_Init+0x10>
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	371c      	adds	r7, #28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	48000800 	.word	0x48000800
 8000e24:	48000c00 	.word	0x48000c00
 8000e28:	48001000 	.word	0x48001000
 8000e2c:	48001400 	.word	0x48001400
 8000e30:	48001800 	.word	0x48001800
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	807b      	strh	r3, [r7, #2]
 8000e44:	4613      	mov	r3, r2
 8000e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e48:	787b      	ldrb	r3, [r7, #1]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e7a:	887a      	ldrh	r2, [r7, #2]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	041a      	lsls	r2, r3, #16
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43d9      	mvns	r1, r3
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	400b      	ands	r3, r1
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	619a      	str	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec6:	d130      	bne.n	8000f2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ed4:	d038      	beq.n	8000f48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ede:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2232      	movs	r2, #50	; 0x32
 8000eec:	fb02 f303 	mul.w	r3, r2, r3
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0c9b      	lsrs	r3, r3, #18
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000efc:	e002      	b.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f10:	d102      	bne.n	8000f18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f2      	bne.n	8000efe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f24:	d110      	bne.n	8000f48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e00f      	b.n	8000f4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f36:	d007      	beq.n	8000f48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f40:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40007000 	.word	0x40007000
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	431bde83 	.word	0x431bde83

08000f64 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e3ca      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f76:	4b97      	ldr	r3, [pc, #604]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f80:	4b94      	ldr	r3, [pc, #592]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80e4 	beq.w	8001160 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d007      	beq.n	8000fae <HAL_RCC_OscConfig+0x4a>
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	2b0c      	cmp	r3, #12
 8000fa2:	f040 808b 	bne.w	80010bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	f040 8087 	bne.w	80010bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fae:	4b89      	ldr	r3, [pc, #548]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x62>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e3a2      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1a      	ldr	r2, [r3, #32]
 8000fca:	4b82      	ldr	r3, [pc, #520]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x7c>
 8000fd6:	4b7f      	ldr	r3, [pc, #508]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fde:	e005      	b.n	8000fec <HAL_RCC_OscConfig+0x88>
 8000fe0:	4b7c      	ldr	r3, [pc, #496]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d223      	bcs.n	8001038 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fd1d 	bl	8001a34 <RCC_SetFlashLatencyFromMSIRange>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e383      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001004:	4b73      	ldr	r3, [pc, #460]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a72      	ldr	r2, [pc, #456]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b70      	ldr	r3, [pc, #448]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	496d      	ldr	r1, [pc, #436]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001022:	4b6c      	ldr	r3, [pc, #432]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	4968      	ldr	r1, [pc, #416]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001032:	4313      	orrs	r3, r2
 8001034:	604b      	str	r3, [r1, #4]
 8001036:	e025      	b.n	8001084 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001038:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a65      	ldr	r2, [pc, #404]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b63      	ldr	r3, [pc, #396]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4960      	ldr	r1, [pc, #384]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001056:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	495b      	ldr	r1, [pc, #364]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001066:	4313      	orrs	r3, r2
 8001068:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d109      	bne.n	8001084 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fcdd 	bl	8001a34 <RCC_SetFlashLatencyFromMSIRange>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e343      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001084:	f000 fc4a 	bl	800191c <HAL_RCC_GetSysClockFreq>
 8001088:	4602      	mov	r2, r0
 800108a:	4b52      	ldr	r3, [pc, #328]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	4950      	ldr	r1, [pc, #320]	; (80011d8 <HAL_RCC_OscConfig+0x274>)
 8001096:	5ccb      	ldrb	r3, [r1, r3]
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	4a4e      	ldr	r2, [pc, #312]	; (80011dc <HAL_RCC_OscConfig+0x278>)
 80010a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010a4:	4b4e      	ldr	r3, [pc, #312]	; (80011e0 <HAL_RCC_OscConfig+0x27c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fbad 	bl	8000808 <HAL_InitTick>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d052      	beq.n	800115e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	e327      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d032      	beq.n	800112a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010c4:	4b43      	ldr	r3, [pc, #268]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a42      	ldr	r2, [pc, #264]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fbea 	bl	80008a8 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010d8:	f7ff fbe6 	bl	80008a8 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e310      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010ea:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010f6:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a36      	ldr	r2, [pc, #216]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4931      	ldr	r1, [pc, #196]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001110:	4313      	orrs	r3, r2
 8001112:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001114:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	492c      	ldr	r1, [pc, #176]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
 8001128:	e01a      	b.n	8001160 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001136:	f7ff fbb7 	bl	80008a8 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800113e:	f7ff fbb3 	bl	80008a8 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e2dd      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f0      	bne.n	800113e <HAL_RCC_OscConfig+0x1da>
 800115c:	e000      	b.n	8001160 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800115e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d074      	beq.n	8001256 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2b08      	cmp	r3, #8
 8001170:	d005      	beq.n	800117e <HAL_RCC_OscConfig+0x21a>
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b0c      	cmp	r3, #12
 8001176:	d10e      	bne.n	8001196 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d10b      	bne.n	8001196 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d064      	beq.n	8001254 <HAL_RCC_OscConfig+0x2f0>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d160      	bne.n	8001254 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e2ba      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119e:	d106      	bne.n	80011ae <HAL_RCC_OscConfig+0x24a>
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e026      	b.n	80011fc <HAL_RCC_OscConfig+0x298>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b6:	d115      	bne.n	80011e4 <HAL_RCC_OscConfig+0x280>
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80011be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a02      	ldr	r2, [pc, #8]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80011ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e014      	b.n	80011fc <HAL_RCC_OscConfig+0x298>
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	08002e4c 	.word	0x08002e4c
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000004 	.word	0x20000004
 80011e4:	4ba0      	ldr	r3, [pc, #640]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a9f      	ldr	r2, [pc, #636]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b9d      	ldr	r3, [pc, #628]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a9c      	ldr	r2, [pc, #624]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001204:	f7ff fb50 	bl	80008a8 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fb4c 	bl	80008a8 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e276      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800121e:	4b92      	ldr	r3, [pc, #584]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x2a8>
 800122a:	e014      	b.n	8001256 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff fb3c 	bl	80008a8 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fb38 	bl	80008a8 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e262      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001246:	4b88      	ldr	r3, [pc, #544]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x2d0>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d060      	beq.n	8001324 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d005      	beq.n	8001274 <HAL_RCC_OscConfig+0x310>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	d119      	bne.n	80012a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d116      	bne.n	80012a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001274:	4b7c      	ldr	r3, [pc, #496]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_RCC_OscConfig+0x328>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e23f      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	061b      	lsls	r3, r3, #24
 800129a:	4973      	ldr	r1, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a0:	e040      	b.n	8001324 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d023      	beq.n	80012f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012aa:	4b6f      	ldr	r3, [pc, #444]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a6e      	ldr	r2, [pc, #440]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b6:	f7ff faf7 	bl	80008a8 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff faf3 	bl	80008a8 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e21d      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d0:	4b65      	ldr	r3, [pc, #404]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b62      	ldr	r3, [pc, #392]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	061b      	lsls	r3, r3, #24
 80012ea:	495f      	ldr	r1, [pc, #380]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
 80012f0:	e018      	b.n	8001324 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b5d      	ldr	r3, [pc, #372]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a5c      	ldr	r2, [pc, #368]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80012f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	f7ff fad3 	bl	80008a8 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff facf 	bl	80008a8 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e1f9      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001318:	4b53      	ldr	r3, [pc, #332]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d03c      	beq.n	80013aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d01c      	beq.n	8001372 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001338:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 800133a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133e:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001348:	f7ff faae 	bl	80008a8 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff faaa 	bl	80008a8 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1d4      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 8001364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0ef      	beq.n	8001350 <HAL_RCC_OscConfig+0x3ec>
 8001370:	e01b      	b.n	80013aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 8001374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001378:	4a3b      	ldr	r2, [pc, #236]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001382:	f7ff fa91 	bl	80008a8 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138a:	f7ff fa8d 	bl	80008a8 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1b7      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 800139e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ef      	bne.n	800138a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80a6 	beq.w	8001504 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013bc:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10d      	bne.n	80013e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013cc:	4a26      	ldr	r2, [pc, #152]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80013ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d2:	6593      	str	r3, [r2, #88]	; 0x58
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e0:	2301      	movs	r3, #1
 80013e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <HAL_RCC_OscConfig+0x508>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d118      	bne.n	8001422 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <HAL_RCC_OscConfig+0x508>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_RCC_OscConfig+0x508>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fa54 	bl	80008a8 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001404:	f7ff fa50 	bl	80008a8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e17a      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_RCC_OscConfig+0x508>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d108      	bne.n	800143c <HAL_RCC_OscConfig+0x4d8>
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 800142c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800143a:	e029      	b.n	8001490 <HAL_RCC_OscConfig+0x52c>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b05      	cmp	r3, #5
 8001442:	d115      	bne.n	8001470 <HAL_RCC_OscConfig+0x50c>
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 8001446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800144a:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 8001456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800145a:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_RCC_OscConfig+0x504>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001464:	e014      	b.n	8001490 <HAL_RCC_OscConfig+0x52c>
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	40007000 	.word	0x40007000
 8001470:	4b9c      	ldr	r3, [pc, #624]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 8001472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001476:	4a9b      	ldr	r2, [pc, #620]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001480:	4b98      	ldr	r3, [pc, #608]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 8001482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001486:	4a97      	ldr	r2, [pc, #604]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d016      	beq.n	80014c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fa06 	bl	80008a8 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a0:	f7ff fa02 	bl	80008a8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e12a      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b6:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80014b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0ed      	beq.n	80014a0 <HAL_RCC_OscConfig+0x53c>
 80014c4:	e015      	b.n	80014f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff f9ef 	bl	80008a8 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff f9eb 	bl	80008a8 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e113      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e4:	4b7f      	ldr	r3, [pc, #508]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80014e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ed      	bne.n	80014ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f2:	7ffb      	ldrb	r3, [r7, #31]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f8:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	4a79      	ldr	r2, [pc, #484]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80014fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001502:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80fe 	beq.w	800170a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	2b02      	cmp	r3, #2
 8001514:	f040 80d0 	bne.w	80016b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001518:	4b72      	ldr	r3, [pc, #456]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f003 0203 	and.w	r2, r3, #3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	429a      	cmp	r2, r3
 800152a:	d130      	bne.n	800158e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	3b01      	subs	r3, #1
 8001538:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d127      	bne.n	800158e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001548:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d11f      	bne.n	800158e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001558:	2a07      	cmp	r2, #7
 800155a:	bf14      	ite	ne
 800155c:	2201      	movne	r2, #1
 800155e:	2200      	moveq	r2, #0
 8001560:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001562:	4293      	cmp	r3, r2
 8001564:	d113      	bne.n	800158e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	3b01      	subs	r3, #1
 8001574:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001576:	429a      	cmp	r2, r3
 8001578:	d109      	bne.n	800158e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	3b01      	subs	r3, #1
 8001588:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d06e      	beq.n	800166c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d069      	beq.n	8001668 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0ad      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a4b      	ldr	r2, [pc, #300]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80015b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015bc:	f7ff f974 	bl	80008a8 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff f970 	bl	80008a8 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e09a      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d6:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <HAL_RCC_OscConfig+0x784>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015f2:	3a01      	subs	r2, #1
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	4311      	orrs	r1, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015fc:	0212      	lsls	r2, r2, #8
 80015fe:	4311      	orrs	r1, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001604:	0852      	lsrs	r2, r2, #1
 8001606:	3a01      	subs	r2, #1
 8001608:	0552      	lsls	r2, r2, #21
 800160a:	4311      	orrs	r1, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001610:	0852      	lsrs	r2, r2, #1
 8001612:	3a01      	subs	r2, #1
 8001614:	0652      	lsls	r2, r2, #25
 8001616:	4311      	orrs	r1, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800161c:	0912      	lsrs	r2, r2, #4
 800161e:	0452      	lsls	r2, r2, #17
 8001620:	430a      	orrs	r2, r1
 8001622:	4930      	ldr	r1, [pc, #192]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 8001624:	4313      	orrs	r3, r2
 8001626:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001632:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a2a      	ldr	r2, [pc, #168]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 800163a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001640:	f7ff f932 	bl	80008a8 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff f92e 	bl	80008a8 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e058      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001666:	e050      	b.n	800170a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e04f      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d148      	bne.n	800170a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 800167e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001682:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4a16      	ldr	r2, [pc, #88]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 800168a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800168e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001690:	f7ff f90a 	bl	80008a8 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff f906 	bl	80008a8 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e030      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x734>
 80016b6:	e028      	b.n	800170a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d023      	beq.n	8001706 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_RCC_OscConfig+0x780>)
 80016c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff f8ed 	bl	80008a8 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d0:	e00c      	b.n	80016ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff f8e9 	bl	80008a8 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d905      	bls.n	80016ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e013      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
 80016e4:	40021000 	.word	0x40021000
 80016e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_OscConfig+0x7b0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ec      	bne.n	80016d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_OscConfig+0x7b0>)
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	4905      	ldr	r1, [pc, #20]	; (8001714 <HAL_RCC_OscConfig+0x7b0>)
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_RCC_OscConfig+0x7b4>)
 8001700:	4013      	ands	r3, r2
 8001702:	60cb      	str	r3, [r1, #12]
 8001704:	e001      	b.n	800170a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	feeefffc 	.word	0xfeeefffc

0800171c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0e7      	b.n	8001900 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4b75      	ldr	r3, [pc, #468]	; (8001908 <HAL_RCC_ClockConfig+0x1ec>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d910      	bls.n	8001760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b72      	ldr	r3, [pc, #456]	; (8001908 <HAL_RCC_ClockConfig+0x1ec>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0207 	bic.w	r2, r3, #7
 8001746:	4970      	ldr	r1, [pc, #448]	; (8001908 <HAL_RCC_ClockConfig+0x1ec>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b6e      	ldr	r3, [pc, #440]	; (8001908 <HAL_RCC_ClockConfig+0x1ec>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0cf      	b.n	8001900 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d010      	beq.n	800178e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	4b66      	ldr	r3, [pc, #408]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001778:	429a      	cmp	r2, r3
 800177a:	d908      	bls.n	800178e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177c:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4960      	ldr	r1, [pc, #384]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d04c      	beq.n	8001834 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a2:	4b5a      	ldr	r3, [pc, #360]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d121      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e0a6      	b.n	8001900 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ba:	4b54      	ldr	r3, [pc, #336]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d115      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e09a      	b.n	8001900 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e08e      	b.n	8001900 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e2:	4b4a      	ldr	r3, [pc, #296]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e086      	b.n	8001900 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4943      	ldr	r1, [pc, #268]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001804:	f7ff f850 	bl	80008a8 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff f84c 	bl	80008a8 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e06e      	b.n	8001900 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d010      	beq.n	8001862 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800184c:	429a      	cmp	r2, r3
 800184e:	d208      	bcs.n	8001862 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	492b      	ldr	r1, [pc, #172]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <HAL_RCC_ClockConfig+0x1ec>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d210      	bcs.n	8001892 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_RCC_ClockConfig+0x1ec>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 0207 	bic.w	r2, r3, #7
 8001878:	4923      	ldr	r1, [pc, #140]	; (8001908 <HAL_RCC_ClockConfig+0x1ec>)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_RCC_ClockConfig+0x1ec>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d001      	beq.n	8001892 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e036      	b.n	8001900 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	d008      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	4918      	ldr	r1, [pc, #96]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d009      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4910      	ldr	r1, [pc, #64]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018d0:	f000 f824 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_RCC_ClockConfig+0x1f0>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	490b      	ldr	r1, [pc, #44]	; (8001910 <HAL_RCC_ClockConfig+0x1f4>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1f8>)
 80018ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1fc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe ff87 	bl	8000808 <HAL_InitTick>
 80018fa:	4603      	mov	r3, r0
 80018fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80018fe:	7afb      	ldrb	r3, [r7, #11]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40022000 	.word	0x40022000
 800190c:	40021000 	.word	0x40021000
 8001910:	08002e4c 	.word	0x08002e4c
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192a:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x108>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001934:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x34>
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d121      	bne.n	800198e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d11e      	bne.n	800198e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d107      	bne.n	800196c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x108>)
 800195e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e005      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x108>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001978:	4a2b      	ldr	r2, [pc, #172]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x10c>)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10d      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d102      	bne.n	800199a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	e004      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2b08      	cmp	r3, #8
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x114>)
 80019a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d134      	bne.n	8001a14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d003      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0xac>
 80019c0:	e005      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x110>)
 80019c4:	617b      	str	r3, [r7, #20]
      break;
 80019c6:	e005      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x114>)
 80019ca:	617b      	str	r3, [r7, #20]
      break;
 80019cc:	e002      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	617b      	str	r3, [r7, #20]
      break;
 80019d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	3301      	adds	r3, #1
 80019e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	0a1b      	lsrs	r3, r3, #8
 80019e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	fb03 f202 	mul.w	r2, r3, r2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	0e5b      	lsrs	r3, r3, #25
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	3301      	adds	r3, #1
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a14:	69bb      	ldr	r3, [r7, #24]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	08002e5c 	.word	0x08002e5c
 8001a2c:	00f42400 	.word	0x00f42400
 8001a30:	007a1200 	.word	0x007a1200

08001a34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a4c:	f7ff fa26 	bl	8000e9c <HAL_PWREx_GetVoltageRange>
 8001a50:	6178      	str	r0, [r7, #20]
 8001a52:	e014      	b.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	4a24      	ldr	r2, [pc, #144]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a6c:	f7ff fa16 	bl	8000e9c <HAL_PWREx_GetVoltageRange>
 8001a70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a84:	d10b      	bne.n	8001a9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b80      	cmp	r3, #128	; 0x80
 8001a8a:	d919      	bls.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a90:	d902      	bls.n	8001a98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a92:	2302      	movs	r3, #2
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	e013      	b.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a98:	2301      	movs	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	e010      	b.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b80      	cmp	r3, #128	; 0x80
 8001aa2:	d902      	bls.n	8001aaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	e00a      	b.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b80      	cmp	r3, #128	; 0x80
 8001aae:	d102      	bne.n	8001ab6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	e004      	b.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b70      	cmp	r3, #112	; 0x70
 8001aba:	d101      	bne.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001abc:	2301      	movs	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 0207 	bic.w	r2, r3, #7
 8001ac8:	4909      	ldr	r1, [pc, #36]	; (8001af0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d001      	beq.n	8001ae2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40022000 	.word	0x40022000

08001af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e049      	b.n	8001b9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7fe fda0 	bl	8000660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f000 fc7c 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d001      	beq.n	8001bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e04f      	b.n	8001c5c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01d      	beq.n	8001c1a <HAL_TIM_Base_Start_IT+0x76>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be6:	d018      	beq.n	8001c1a <HAL_TIM_Base_Start_IT+0x76>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_TIM_Base_Start_IT+0xc8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_TIM_Base_Start_IT+0x76>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00e      	beq.n	8001c1a <HAL_TIM_Base_Start_IT+0x76>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d009      	beq.n	8001c1a <HAL_TIM_Base_Start_IT+0x76>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d004      	beq.n	8001c1a <HAL_TIM_Base_Start_IT+0x76>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_TIM_Base_Start_IT+0xd8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d115      	bne.n	8001c46 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b06      	cmp	r3, #6
 8001c2a:	d015      	beq.n	8001c58 <HAL_TIM_Base_Start_IT+0xb4>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c32:	d011      	beq.n	8001c58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c44:	e008      	b.n	8001c58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e000      	b.n	8001c5a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40012c00 	.word	0x40012c00
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40000800 	.word	0x40000800
 8001c74:	40000c00 	.word	0x40000c00
 8001c78:	40013400 	.word	0x40013400
 8001c7c:	40014000 	.word	0x40014000
 8001c80:	00010007 	.word	0x00010007

08001c84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e049      	b.n	8001d2a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f841 	bl	8001d32 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f000 fbb4 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_TIM_PWM_Start+0x24>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	e03c      	b.n	8001de6 <HAL_TIM_PWM_Start+0x9e>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d109      	bne.n	8001d86 <HAL_TIM_PWM_Start+0x3e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	e02f      	b.n	8001de6 <HAL_TIM_PWM_Start+0x9e>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d109      	bne.n	8001da0 <HAL_TIM_PWM_Start+0x58>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	bf14      	ite	ne
 8001d98:	2301      	movne	r3, #1
 8001d9a:	2300      	moveq	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e022      	b.n	8001de6 <HAL_TIM_PWM_Start+0x9e>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d109      	bne.n	8001dba <HAL_TIM_PWM_Start+0x72>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	bf14      	ite	ne
 8001db2:	2301      	movne	r3, #1
 8001db4:	2300      	moveq	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	e015      	b.n	8001de6 <HAL_TIM_PWM_Start+0x9e>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d109      	bne.n	8001dd4 <HAL_TIM_PWM_Start+0x8c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	e008      	b.n	8001de6 <HAL_TIM_PWM_Start+0x9e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e09c      	b.n	8001f28 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d104      	bne.n	8001dfe <HAL_TIM_PWM_Start+0xb6>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dfc:	e023      	b.n	8001e46 <HAL_TIM_PWM_Start+0xfe>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d104      	bne.n	8001e0e <HAL_TIM_PWM_Start+0xc6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e0c:	e01b      	b.n	8001e46 <HAL_TIM_PWM_Start+0xfe>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d104      	bne.n	8001e1e <HAL_TIM_PWM_Start+0xd6>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e1c:	e013      	b.n	8001e46 <HAL_TIM_PWM_Start+0xfe>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_PWM_Start+0xe6>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e2c:	e00b      	b.n	8001e46 <HAL_TIM_PWM_Start+0xfe>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d104      	bne.n	8001e3e <HAL_TIM_PWM_Start+0xf6>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e3c:	e003      	b.n	8001e46 <HAL_TIM_PWM_Start+0xfe>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	6839      	ldr	r1, [r7, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fef8 	bl	8002c44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a35      	ldr	r2, [pc, #212]	; (8001f30 <HAL_TIM_PWM_Start+0x1e8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x13e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <HAL_TIM_PWM_Start+0x1ec>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00e      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x13e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a32      	ldr	r2, [pc, #200]	; (8001f38 <HAL_TIM_PWM_Start+0x1f0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d009      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x13e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a31      	ldr	r2, [pc, #196]	; (8001f3c <HAL_TIM_PWM_Start+0x1f4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_TIM_PWM_Start+0x13e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2f      	ldr	r2, [pc, #188]	; (8001f40 <HAL_TIM_PWM_Start+0x1f8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_PWM_Start+0x142>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_TIM_PWM_Start+0x144>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_TIM_PWM_Start+0x1e8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01d      	beq.n	8001ee6 <HAL_TIM_PWM_Start+0x19e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb2:	d018      	beq.n	8001ee6 <HAL_TIM_PWM_Start+0x19e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <HAL_TIM_PWM_Start+0x1fc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_TIM_PWM_Start+0x19e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <HAL_TIM_PWM_Start+0x200>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_TIM_PWM_Start+0x19e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <HAL_TIM_PWM_Start+0x204>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_TIM_PWM_Start+0x19e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <HAL_TIM_PWM_Start+0x1ec>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d004      	beq.n	8001ee6 <HAL_TIM_PWM_Start+0x19e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a15      	ldr	r2, [pc, #84]	; (8001f38 <HAL_TIM_PWM_Start+0x1f0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d115      	bne.n	8001f12 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_TIM_PWM_Start+0x208>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d015      	beq.n	8001f24 <HAL_TIM_PWM_Start+0x1dc>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efe:	d011      	beq.n	8001f24 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f10:	e008      	b.n	8001f24 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e000      	b.n	8001f26 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40012c00 	.word	0x40012c00
 8001f34:	40013400 	.word	0x40013400
 8001f38:	40014000 	.word	0x40014000
 8001f3c:	40014400 	.word	0x40014400
 8001f40:	40014800 	.word	0x40014800
 8001f44:	40000400 	.word	0x40000400
 8001f48:	40000800 	.word	0x40000800
 8001f4c:	40000c00 	.word	0x40000c00
 8001f50:	00010007 	.word	0x00010007

08001f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d020      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01b      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0202 	mvn.w	r2, #2
 8001f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fa27 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fa19 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fa2a 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d020      	beq.n	8002004 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01b      	beq.n	8002004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0204 	mvn.w	r2, #4
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fa01 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9f3 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fa04 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d020      	beq.n	8002050 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01b      	beq.n	8002050 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0208 	mvn.w	r2, #8
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2204      	movs	r2, #4
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f9db 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f9cd 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f9de 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d020      	beq.n	800209c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01b      	beq.n	800209c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0210 	mvn.w	r2, #16
 800206c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2208      	movs	r2, #8
 8002072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f9b5 	bl	80023f2 <HAL_TIM_IC_CaptureCallback>
 8002088:	e005      	b.n	8002096 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9a7 	bl	80023de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f9b8 	bl	8002406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0201 	mvn.w	r2, #1
 80020b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe f884 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00c      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fe68 	bl	8002db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00c      	beq.n	8002108 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fe60 	bl	8002dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f977 	bl	800241a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00c      	beq.n	8002150 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0220 	mvn.w	r2, #32
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fe28 	bl	8002da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002172:	2302      	movs	r3, #2
 8002174:	e066      	b.n	8002244 <HAL_TIM_OC_ConfigChannel+0xec>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b14      	cmp	r3, #20
 8002182:	d857      	bhi.n	8002234 <HAL_TIM_OC_ConfigChannel+0xdc>
 8002184:	a201      	add	r2, pc, #4	; (adr r2, 800218c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218a:	bf00      	nop
 800218c:	080021e1 	.word	0x080021e1
 8002190:	08002235 	.word	0x08002235
 8002194:	08002235 	.word	0x08002235
 8002198:	08002235 	.word	0x08002235
 800219c:	080021ef 	.word	0x080021ef
 80021a0:	08002235 	.word	0x08002235
 80021a4:	08002235 	.word	0x08002235
 80021a8:	08002235 	.word	0x08002235
 80021ac:	080021fd 	.word	0x080021fd
 80021b0:	08002235 	.word	0x08002235
 80021b4:	08002235 	.word	0x08002235
 80021b8:	08002235 	.word	0x08002235
 80021bc:	0800220b 	.word	0x0800220b
 80021c0:	08002235 	.word	0x08002235
 80021c4:	08002235 	.word	0x08002235
 80021c8:	08002235 	.word	0x08002235
 80021cc:	08002219 	.word	0x08002219
 80021d0:	08002235 	.word	0x08002235
 80021d4:	08002235 	.word	0x08002235
 80021d8:	08002235 	.word	0x08002235
 80021dc:	08002227 	.word	0x08002227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f9bc 	bl	8002564 <TIM_OC1_SetConfig>
      break;
 80021ec:	e025      	b.n	800223a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fa45 	bl	8002684 <TIM_OC2_SetConfig>
      break;
 80021fa:	e01e      	b.n	800223a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fac8 	bl	8002798 <TIM_OC3_SetConfig>
      break;
 8002208:	e017      	b.n	800223a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fb49 	bl	80028a8 <TIM_OC4_SetConfig>
      break;
 8002216:	e010      	b.n	800223a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fbac 	bl	800297c <TIM_OC5_SetConfig>
      break;
 8002224:	e009      	b.n	800223a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fc09 	bl	8002a44 <TIM_OC6_SetConfig>
      break;
 8002232:	e002      	b.n	800223a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	75fb      	strb	r3, [r7, #23]
      break;
 8002238:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002242:	7dfb      	ldrb	r3, [r7, #23]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_TIM_ConfigClockSource+0x1c>
 8002264:	2302      	movs	r3, #2
 8002266:	e0b6      	b.n	80023d6 <HAL_TIM_ConfigClockSource+0x18a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800228a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a4:	d03e      	beq.n	8002324 <HAL_TIM_ConfigClockSource+0xd8>
 80022a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022aa:	f200 8087 	bhi.w	80023bc <HAL_TIM_ConfigClockSource+0x170>
 80022ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b2:	f000 8086 	beq.w	80023c2 <HAL_TIM_ConfigClockSource+0x176>
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ba:	d87f      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x170>
 80022bc:	2b70      	cmp	r3, #112	; 0x70
 80022be:	d01a      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0xaa>
 80022c0:	2b70      	cmp	r3, #112	; 0x70
 80022c2:	d87b      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x170>
 80022c4:	2b60      	cmp	r3, #96	; 0x60
 80022c6:	d050      	beq.n	800236a <HAL_TIM_ConfigClockSource+0x11e>
 80022c8:	2b60      	cmp	r3, #96	; 0x60
 80022ca:	d877      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x170>
 80022cc:	2b50      	cmp	r3, #80	; 0x50
 80022ce:	d03c      	beq.n	800234a <HAL_TIM_ConfigClockSource+0xfe>
 80022d0:	2b50      	cmp	r3, #80	; 0x50
 80022d2:	d873      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x170>
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d058      	beq.n	800238a <HAL_TIM_ConfigClockSource+0x13e>
 80022d8:	2b40      	cmp	r3, #64	; 0x40
 80022da:	d86f      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x170>
 80022dc:	2b30      	cmp	r3, #48	; 0x30
 80022de:	d064      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15e>
 80022e0:	2b30      	cmp	r3, #48	; 0x30
 80022e2:	d86b      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x170>
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d060      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15e>
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d867      	bhi.n	80023bc <HAL_TIM_ConfigClockSource+0x170>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d05c      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15e>
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d05a      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x15e>
 80022f4:	e062      	b.n	80023bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002306:	f000 fc7d 	bl	8002c04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	609a      	str	r2, [r3, #8]
      break;
 8002322:	e04f      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002334:	f000 fc66 	bl	8002c04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002346:	609a      	str	r2, [r3, #8]
      break;
 8002348:	e03c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002356:	461a      	mov	r2, r3
 8002358:	f000 fbda 	bl	8002b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2150      	movs	r1, #80	; 0x50
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fc33 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 8002368:	e02c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002376:	461a      	mov	r2, r3
 8002378:	f000 fbf9 	bl	8002b6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2160      	movs	r1, #96	; 0x60
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fc23 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 8002388:	e01c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002396:	461a      	mov	r2, r3
 8002398:	f000 fbba 	bl	8002b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2140      	movs	r1, #64	; 0x40
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fc13 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 80023a8:	e00c      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4610      	mov	r0, r2
 80023b6:	f000 fc0a 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 80023ba:	e003      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      break;
 80023c0:	e000      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80023c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a40      	ldr	r2, [pc, #256]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d00f      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3d      	ldr	r2, [pc, #244]	; (8002548 <TIM_Base_SetConfig+0x118>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00b      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3c      	ldr	r2, [pc, #240]	; (800254c <TIM_Base_SetConfig+0x11c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3b      	ldr	r2, [pc, #236]	; (8002550 <TIM_Base_SetConfig+0x120>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d003      	beq.n	8002470 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <TIM_Base_SetConfig+0x124>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2f      	ldr	r2, [pc, #188]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002490:	d01b      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a2c      	ldr	r2, [pc, #176]	; (8002548 <TIM_Base_SetConfig+0x118>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d017      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <TIM_Base_SetConfig+0x11c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <TIM_Base_SetConfig+0x120>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00f      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a29      	ldr	r2, [pc, #164]	; (8002554 <TIM_Base_SetConfig+0x124>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a28      	ldr	r2, [pc, #160]	; (8002558 <TIM_Base_SetConfig+0x128>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <TIM_Base_SetConfig+0x12c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0x9a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a26      	ldr	r2, [pc, #152]	; (8002560 <TIM_Base_SetConfig+0x130>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d108      	bne.n	80024dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <TIM_Base_SetConfig+0x114>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00f      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <TIM_Base_SetConfig+0x124>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00b      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a11      	ldr	r2, [pc, #68]	; (8002558 <TIM_Base_SetConfig+0x128>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <TIM_Base_SetConfig+0x12c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0xf8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <TIM_Base_SetConfig+0x130>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d103      	bne.n	8002530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	615a      	str	r2, [r3, #20]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800
 8002550:	40000c00 	.word	0x40000c00
 8002554:	40013400 	.word	0x40013400
 8002558:	40014000 	.word	0x40014000
 800255c:	40014400 	.word	0x40014400
 8002560:	40014800 	.word	0x40014800

08002564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f023 0201 	bic.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f023 0302 	bic.w	r3, r3, #2
 80025b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <TIM_OC1_SetConfig+0x10c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00f      	beq.n	80025e4 <TIM_OC1_SetConfig+0x80>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a2b      	ldr	r2, [pc, #172]	; (8002674 <TIM_OC1_SetConfig+0x110>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00b      	beq.n	80025e4 <TIM_OC1_SetConfig+0x80>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a2a      	ldr	r2, [pc, #168]	; (8002678 <TIM_OC1_SetConfig+0x114>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <TIM_OC1_SetConfig+0x80>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a29      	ldr	r2, [pc, #164]	; (800267c <TIM_OC1_SetConfig+0x118>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <TIM_OC1_SetConfig+0x80>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a28      	ldr	r2, [pc, #160]	; (8002680 <TIM_OC1_SetConfig+0x11c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d10c      	bne.n	80025fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f023 0308 	bic.w	r3, r3, #8
 80025ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f023 0304 	bic.w	r3, r3, #4
 80025fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <TIM_OC1_SetConfig+0x10c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00f      	beq.n	8002626 <TIM_OC1_SetConfig+0xc2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <TIM_OC1_SetConfig+0x110>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00b      	beq.n	8002626 <TIM_OC1_SetConfig+0xc2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a19      	ldr	r2, [pc, #100]	; (8002678 <TIM_OC1_SetConfig+0x114>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d007      	beq.n	8002626 <TIM_OC1_SetConfig+0xc2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <TIM_OC1_SetConfig+0x118>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d003      	beq.n	8002626 <TIM_OC1_SetConfig+0xc2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a17      	ldr	r2, [pc, #92]	; (8002680 <TIM_OC1_SetConfig+0x11c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d111      	bne.n	800264a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800262c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	621a      	str	r2, [r3, #32]
}
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40013400 	.word	0x40013400
 8002678:	40014000 	.word	0x40014000
 800267c:	40014400 	.word	0x40014400
 8002680:	40014800 	.word	0x40014800

08002684 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f023 0210 	bic.w	r2, r3, #16
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f023 0320 	bic.w	r3, r3, #32
 80026d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a28      	ldr	r2, [pc, #160]	; (8002784 <TIM_OC2_SetConfig+0x100>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d003      	beq.n	80026f0 <TIM_OC2_SetConfig+0x6c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a27      	ldr	r2, [pc, #156]	; (8002788 <TIM_OC2_SetConfig+0x104>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d10d      	bne.n	800270c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800270a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <TIM_OC2_SetConfig+0x100>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00f      	beq.n	8002734 <TIM_OC2_SetConfig+0xb0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <TIM_OC2_SetConfig+0x104>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00b      	beq.n	8002734 <TIM_OC2_SetConfig+0xb0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a1b      	ldr	r2, [pc, #108]	; (800278c <TIM_OC2_SetConfig+0x108>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d007      	beq.n	8002734 <TIM_OC2_SetConfig+0xb0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <TIM_OC2_SetConfig+0x10c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <TIM_OC2_SetConfig+0xb0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a19      	ldr	r2, [pc, #100]	; (8002794 <TIM_OC2_SetConfig+0x110>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d113      	bne.n	800275c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800273a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40012c00 	.word	0x40012c00
 8002788:	40013400 	.word	0x40013400
 800278c:	40014000 	.word	0x40014000
 8002790:	40014400 	.word	0x40014400
 8002794:	40014800 	.word	0x40014800

08002798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a27      	ldr	r2, [pc, #156]	; (8002894 <TIM_OC3_SetConfig+0xfc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d003      	beq.n	8002802 <TIM_OC3_SetConfig+0x6a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a26      	ldr	r2, [pc, #152]	; (8002898 <TIM_OC3_SetConfig+0x100>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d10d      	bne.n	800281e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800281c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <TIM_OC3_SetConfig+0xfc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00f      	beq.n	8002846 <TIM_OC3_SetConfig+0xae>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1b      	ldr	r2, [pc, #108]	; (8002898 <TIM_OC3_SetConfig+0x100>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00b      	beq.n	8002846 <TIM_OC3_SetConfig+0xae>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1a      	ldr	r2, [pc, #104]	; (800289c <TIM_OC3_SetConfig+0x104>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <TIM_OC3_SetConfig+0xae>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <TIM_OC3_SetConfig+0x108>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d003      	beq.n	8002846 <TIM_OC3_SetConfig+0xae>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <TIM_OC3_SetConfig+0x10c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d113      	bne.n	800286e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800284c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	621a      	str	r2, [r3, #32]
}
 8002888:	bf00      	nop
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40012c00 	.word	0x40012c00
 8002898:	40013400 	.word	0x40013400
 800289c:	40014000 	.word	0x40014000
 80028a0:	40014400 	.word	0x40014400
 80028a4:	40014800 	.word	0x40014800

080028a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	031b      	lsls	r3, r3, #12
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <TIM_OC4_SetConfig+0xc0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00f      	beq.n	800292c <TIM_OC4_SetConfig+0x84>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <TIM_OC4_SetConfig+0xc4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00b      	beq.n	800292c <TIM_OC4_SetConfig+0x84>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <TIM_OC4_SetConfig+0xc8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d007      	beq.n	800292c <TIM_OC4_SetConfig+0x84>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <TIM_OC4_SetConfig+0xcc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d003      	beq.n	800292c <TIM_OC4_SetConfig+0x84>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a14      	ldr	r2, [pc, #80]	; (8002978 <TIM_OC4_SetConfig+0xd0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d109      	bne.n	8002940 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	621a      	str	r2, [r3, #32]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40013400 	.word	0x40013400
 8002970:	40014000 	.word	0x40014000
 8002974:	40014400 	.word	0x40014400
 8002978:	40014800 	.word	0x40014800

0800297c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80029c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <TIM_OC5_SetConfig+0xb4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00f      	beq.n	80029f6 <TIM_OC5_SetConfig+0x7a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <TIM_OC5_SetConfig+0xb8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <TIM_OC5_SetConfig+0x7a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <TIM_OC5_SetConfig+0xbc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <TIM_OC5_SetConfig+0x7a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <TIM_OC5_SetConfig+0xc0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_OC5_SetConfig+0x7a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <TIM_OC5_SetConfig+0xc4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d109      	bne.n	8002a0a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	621a      	str	r2, [r3, #32]
}
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40013400 	.word	0x40013400
 8002a38:	40014000 	.word	0x40014000
 8002a3c:	40014400 	.word	0x40014400
 8002a40:	40014800 	.word	0x40014800

08002a44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	051b      	lsls	r3, r3, #20
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <TIM_OC6_SetConfig+0xb8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00f      	beq.n	8002ac0 <TIM_OC6_SetConfig+0x7c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <TIM_OC6_SetConfig+0xbc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00b      	beq.n	8002ac0 <TIM_OC6_SetConfig+0x7c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <TIM_OC6_SetConfig+0xc0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_OC6_SetConfig+0x7c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <TIM_OC6_SetConfig+0xc4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_OC6_SetConfig+0x7c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <TIM_OC6_SetConfig+0xc8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d109      	bne.n	8002ad4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	029b      	lsls	r3, r3, #10
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	621a      	str	r2, [r3, #32]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40013400 	.word	0x40013400
 8002b04:	40014000 	.word	0x40014000
 8002b08:	40014400 	.word	0x40014400
 8002b0c:	40014800 	.word	0x40014800

08002b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f023 0201 	bic.w	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f023 030a 	bic.w	r3, r3, #10
 8002b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b087      	sub	sp, #28
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f023 0210 	bic.w	r2, r3, #16
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	031b      	lsls	r3, r3, #12
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002baa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	621a      	str	r2, [r3, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f043 0307 	orr.w	r3, r3, #7
 8002bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	609a      	str	r2, [r3, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	021a      	lsls	r2, r3, #8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2201      	movs	r2, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1a      	ldr	r2, [r3, #32]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	401a      	ands	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a1a      	ldr	r2, [r3, #32]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	621a      	str	r2, [r3, #32]
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e068      	b.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a2e      	ldr	r2, [pc, #184]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2d      	ldr	r2, [pc, #180]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ce2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1e      	ldr	r2, [pc, #120]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01d      	beq.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d018      	beq.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1b      	ldr	r2, [pc, #108]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00e      	beq.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d10c      	bne.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40012c00 	.word	0x40012c00
 8002d8c:	40013400 	.word	0x40013400
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40014000 	.word	0x40014000

08002da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <memset>:
 8002ddc:	4402      	add	r2, r0
 8002dde:	4603      	mov	r3, r0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	4d0d      	ldr	r5, [pc, #52]	; (8002e24 <__libc_init_array+0x38>)
 8002df0:	4c0d      	ldr	r4, [pc, #52]	; (8002e28 <__libc_init_array+0x3c>)
 8002df2:	1b64      	subs	r4, r4, r5
 8002df4:	10a4      	asrs	r4, r4, #2
 8002df6:	2600      	movs	r6, #0
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	4d0b      	ldr	r5, [pc, #44]	; (8002e2c <__libc_init_array+0x40>)
 8002dfe:	4c0c      	ldr	r4, [pc, #48]	; (8002e30 <__libc_init_array+0x44>)
 8002e00:	f000 f818 	bl	8002e34 <_init>
 8002e04:	1b64      	subs	r4, r4, r5
 8002e06:	10a4      	asrs	r4, r4, #2
 8002e08:	2600      	movs	r6, #0
 8002e0a:	42a6      	cmp	r6, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e14:	4798      	blx	r3
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e1e:	4798      	blx	r3
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08002e8c 	.word	0x08002e8c
 8002e28:	08002e8c 	.word	0x08002e8c
 8002e2c:	08002e8c 	.word	0x08002e8c
 8002e30:	08002e90 	.word	0x08002e90

08002e34 <_init>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	bf00      	nop
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr

08002e40 <_fini>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	bf00      	nop
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr
